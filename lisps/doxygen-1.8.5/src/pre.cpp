
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1361] =
    {   0,
      167,  167,  186,  184,  185,    1,  184,  185,  183,  185,
        3,  184,  185,  184,  185,  184,  185,    2,  184,  185,
        6,  184,  185,    1,    6,  184,  185,    6,  184,  185,
        6,  183,  185,    3,    6,  184,  185,    5,  184,  185,
        6,  184,  185,    6,  184,  185,    6,  184,  185,    2,
        6,  184,  185,   59,  184,  185,    1,   59,  184,  185,
       54,  183,  185,    3,   59,  184,  185,   59,  184,  185,
       59,  184,  185,   56,   59,  184,  185,   56,   59,  184,
      185,   56,   59,  184,  185,   56,   59,  184,  185,   56,
       59,  184,  185,   56,   59,  184,  185,   56,   59,  184,

      185,    2,   59,  184,  185,   83,  184,  185,    1,   83,
      184,  185,   81,  183,  185,    3,   83,  184,  185,   83,
      184,  185,   83,  184,  185,   82,   83,  184,  185,   82,
       83,  184,  185,   82,   83,  184,  185,    2,   83,  184,
      185,   84,   87,  184,  185,    1,   84,   87,  184,  185,
       92,  183,  185,    3,   84,   87,  184,  185,   86,   87,
      184,  185,   87,  184,  185,   87,  184,  185,   84,   87,
      184,  185,    2,   84,   87,  184,  185,   93,   96,  184,
      185,    1,   93,   96,  184,  185,    3,   93,   96,  184,
      185,   95,   96,  184,  185,   93,   96,  184,  185,   93,

       96,  184,  185,   96,  184,  185,    2,   93,   96,  184,
      185,   23,  184,  185,    1,   23,  184,  185,   24,  183,
      185,    3,   23,  184,  185,   16,   23,  184,  185,   23,
      184,  185,   23,  184,  185,   23,  184,  185,   21,   23,
      184,  185,16404,   23,  184,  185,   21,   23,  184,  185,
    16404,   11,   23,  184,  185,   12,   23,  184,  185,    2,
       23,  184,  185,   17,  184,  185,    1,   17,  184,  185,
       19,  184,  185,   17,  184,  185,   17,  184,  185,  184,
      185,    2,   17,  184,  185,  184,  185,    1,  184,  185,
        3,  184,  185,  184,  185,  184,  185,    2,  184,  185,

       98,  184,  185,  102,  184,  185,    1,  102,  184,  185,
      100,  183,  185,    3,  102,  184,  185,  102,  184,  185,
      102,  184,  185,  102,  184,  185,    2,  102,  184,  185,
     8298,  184,  185,16487,16489,16490,  184,  185,  109,  184,
      185,  110,  184,  185,  108,  184,  185,  184,  185,  112,
      184,  185,  184,  185,  179,  184,  185,    1,  179,  184,
      185,  167,  179,  184,  185,  166,  183,  185,    3,  179,
      184,  185,  170,  179,  184,  185,  162,  179,  184,  185,
      171,  179,  184,  185,  179,  184,  185,  179,  184,  185,
      169,  179,  184,  185,  163,  179,  184,  185,  179,  184,

      185,    2,  179,  184,  185,   76,  184,  185,    1,   76,
      184,  185,   75,  183,  185,    3,   76,  184,  185,   76,
      184,  185,   76,  184,  185,    2,   76,  184,  185,   74,
       76,  184,  185,    1,   74,   76,  184,  185,   74,   76,
      184,  185,   74,   75,  183,  185,    3,   74,   76,  184,
      185,   73,   76,  184,  185,   74,   76,  184,  185,   74,
       76,  184,  185,    2,   74,   76,  184,  185,  139,  141,
      184,  185,    1,  141,  184,  185,  140,  183,  185,    3,
      139,  141,  184,  185,  141,  184,  185,  141,  184,  185,
      139,  141,  184,  185,  141,  184,  185,  141,  184,  185,

        2,  139,  141,  184,  185,   33,   36,  184,  185,    1,
       33,   36,  184,  185,   35,  183,  185,    3,   33,   36,
      184,  185,   36,  184,  185,   33,   36,  184,  185,   33,
       36,  184,  185,    2,   33,   36,  184,  185,  142,  164,
      184,  185,    1,  142,  164,  184,  185,  144,  183,  185,
        3,  142,  164,  184,  185,  164,  184,  185,  142,  164,
      184,  185,  142,  164,  184,  185,  163,  164,  184,  185,
        2,  142,  164,  184,  185,  141,  184,  185,  141,  184,
      185,  141,  184,  185,  141,  184,  185,  152,  156,  157,
      184,  185,    1,  152,  157,  184,  185,  153,  183,  185,

        3,  152,  156,  157,  184,  185,  156,  157,  184,  185,
      152,  156,  157,  184,  185,  157,  184,  185,    2,  152,
      156,  157,  184,  185,  149,  151,  184,  185,    1,  151,
      184,  185,  150,  183,  185,    3,  149,  151,  184,  185,
      151,  184,  185,  149,  151,  184,  185,  149,  151,  184,
      185,    2,  149,  151,  184,  185,  160,  161,  184,  185,
        1,  161,  184,  185,    3,  160,  161,  184,  185,  160,
      161,  184,  185,  160,  161,  184,  185,    2,  160,  161,
      184,  185,   65,  184,  185,    1,   65,  184,  185,   66,
      183,  185,    3,   65,  184,  185,   65,  184,  185,   65,

      184,  185,   64,   65,  184,  185,   65,  184,  185,   64,
       65,  184,  185,    2,   65,  184,  185,   72,  184,  185,
        1,   72,  184,  185,   70,  183,  185,    3,   72,  184,
      185,   72,  184,  185,   72,  184,  185,   68,   72,  184,
      185,   72,  184,  185,    2,   72,  184,  185,   71,   72,
      184,  185,   69,   72,  184,  185,  177,  184,  185,    1,
      177,  184,  185,    3,  177,  184,  185,  174,  177,  184,
      185,  177,  184,  185,  177,  184,  185,  177,  184,  185,
        2,  177,  184,  185,  178,  184,  185,    1,  178,  184,
      185,    3,  178,  184,  185,  176,  178,  184,  185,  178,

      184,  185,  178,  184,  185,  178,  184,  185,    2,  178,
      184,  185,   60,  184,  185,   58,  184,  185,    1,   58,
      184,  185,    3,   58,  184,  185,   58,  184,  185,   58,
      184,  185,   58,  184,  185,    2,   58,  184,  185,   32,
      184,  185,    1,   32,  184,  185,   30,  183,  185,    3,
       32,  184,  185,   29,   32,  184,  185,   32,  184,  185,
       25,   32,  184,  185,   26,   32,  184,  185,   32,  184,
      185,   32,  184,  185,   31,   32,  184,  185,    2,   32,
      184,  185,   40,  184,  185,    1,   40,  184,  185,    3,
       40,  184,  185,   37,   40,  184,  185,   40,  184,  185,

       40,  184,  185,   40,  184,  185,    2,   40,  184,  185,
      126,  184,  185,    1,  126,  184,  185,  125,  126,  184,
      185,    3,  126,  184,  185,  126,  184,  185,  126,  184,
      185,    2,  126,  184,  185,  129,  130,  184,  185,    1,
      129,  130,  184,  185,  128,  183,  185,    3,  129,  130,
      184,  185,  129,  184,  185,  129,  184,  185,  129,  130,
      184,  185,  129,  184,  185,    2,  129,  130,  184,  185,
      181,  182,    6,    6,    5,    6,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   91,  181,   89,  182,
       82,   82,   82,   82,   84,   84,   93,   90,   93,  181,

       88,   93,  182,   93,   94, 8212,   21,16404,   22,   21,
    16404,   17,   17,  181,   17,  182,   17,   18,   99,  181,
      182,   97,   98,  100,  181,  182,  101, 8298, 8297, 8295,
     8298,16487,16489,16490,  110,  109,  110,  108,  112,  112,
      107,  167,  168,  113,  181,  114,  182,  163,  165,   74,
       74,   73,  139,  115,  117,  181,  116,  182,  139,   33,
       34,   33,  182,   33,  142,  143,  142,  182,  142,  138,
      138,  181,  152,  156,  152,  156,  154,  156,  181,  155,
      156,  182,  152,  156,  149,  146,  148,  181,  147,  149,
      182,  149,  160,  158,  160,  181,  159,  160,  182,  160,

       64,   61,   64,   68,   67,   69,  173,  181,  172,  182,
      175,   60,   57,   28,  181,   38,  181,   38,  182,   39,
      125,  130,  181,  182,  130,  181,  182,    4,   56,   56,
       56,   56,   56,   48,   56,   56,   56,   56,   56,   56,
       91,   91,  181,   89,   89,  182,   82,   82,   82,   77,
       82,   82,   85,    4,   84,   90,   93,   90,   90,   93,
      181,   88,   93,   88,   88,   93,  182,    4,   93,   15,
       15,   21,16404,   17,  181,   17,  182,    4,   17,  181,
      182,    4,    4,   99,  181,  182,    4,  111,  168,  113,
      113,  181,  114,  114,  182,  116,  182,    4,  139,  119,

       33,  182,    4,   33,  142,  182,    4,  142,  136,  137,
      156,  181,  156,  182,    4,  152,  156,    4,  156,  145,
      149,  182,    4,  149,  160,  181,  160,  182,    4,  160,
       64,  172,  182,   27,   28,  181,  132,  132,  181,  131,
      131,  182,    4,  130,  180,16391,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   91,  180,   82,
       78,   82,   82,   82,   85,   90,   93,  180,   14,   13,
       14,   21,16404,   17,  180,  180,  180,  104,  112,  116,
      118,  119,  137,  156,  180,  160,  180,   64,   27,16391,
        9, 8199,   56,   56,   49,   52,   50,   50,   56,   56,

       56,   56,   56,   56,   56,   56,   79,   82,   80,   82,
       82,   13,   21,16404,  121,   64, 8199,    9,   56,   56,
       53,   45,   44,   56,   56,   56,   56,   51,   21,16404,
      120,  124,  127,  123,   64,    8,    9,   43,   47,   46,
    16425,   42,   10,  122,   64,    9, 8233,   63,   62,    9,
     8233,  135,  134,    9,  133,    9,   55,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1279] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   14,   16,   18,
       21,   24,   28,   31,   34,   38,   41,   44,   47,   50,
       54,   57,   61,   64,   68,   71,   74,   78,   82,   86,

       90,   94,   98,  102,  106,  109,  113,  116,  120,  123,
      126,  130,  134,  138,  142,  146,  151,  154,  159,  163,
      166,  169,  173,  178,  182,  187,  192,  196,  200,  204,
      207,  212,  215,  219,  222,  226,  230,  233,  236,  239,
      244,  247,  252,  256,  260,  264,  267,  271,  274,  277,
      280,  282,  286,  288,  291,  294,  296,  298,  301,  304,
      307,  311,  314,  318,  321,  324,  327,  331,  337,  339,
      342,  345,  348,  350,  353,  355,  358,  362,  366,  369,
      373,  377,  381,  385,  388,  391,  395,  399,  402,  406,
      409,  413,  416,  420,  423,  426,  430,  434,  439,  443,

      447,  452,  456,  460,  464,  469,  473,  477,  480,  485,
      488,  491,  495,  498,  501,  506,  510,  515,  518,  523,
      526,  530,  534,  539,  543,  548,  551,  556,  559,  563,
      567,  571,  576,  579,  582,  585,  588,  593,  598,  601,
      607,  611,  616,  619,  625,  629,  633,  636,  641,  644,
      648,  652,  657,  661,  665,  670,  674,  678,  683,  686,
      690,  693,  697,  700,  703,  707,  710,  714,  718,  721,
      725,  728,  732,  735,  738,  742,  745,  749,  753,  757,
      760,  764,  768,  772,  775,  778,  781,  785,  788,  792,
      796,  800,  803,  806,  809,  813,  816,  819,  823,  827,

      830,  833,  836,  840,  843,  847,  850,  854,  858,  861,
      865,  869,  872,  875,  879,  883,  886,  890,  894,  898,
      901,  904,  907,  911,  914,  918,  922,  926,  929,  932,
      936,  940,  945,  948,  953,  956,  959,  963,  966,  971,
      972,  973,  973,  974,  975,  976,  977,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  989,  991,
      992,  993,  994,  995,  996,  996,  996,  997,  998, 1001,
     1004, 1005, 1006, 1006, 1006, 1006, 1007, 1009, 1010, 1010,
     1012, 1013, 1015, 1017, 1018, 1019, 1019, 1020, 1021, 1022,
     1022, 1022, 1023, 1024, 1024, 1025, 1026, 1027, 1027, 1028,

     1028, 1029, 1030, 1031, 1035, 1035, 1035, 1036, 1037, 1038,
     1039, 1039, 1040, 1040, 1041, 1042, 1043, 1043, 1044, 1046,
     1048, 1049, 1050, 1050, 1051, 1052, 1053, 1054, 1055, 1057,
     1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1069,
     1070, 1071, 1073, 1073, 1073, 1073, 1075, 1076, 1077, 1080,
     1083, 1085, 1085, 1085, 1086, 1087, 1089, 1092, 1093, 1094,
     1097, 1100, 1101, 1102, 1103, 1103, 1104, 1105, 1106, 1107,
     1109, 1111, 1112, 1113, 1114, 1114, 1114, 1114, 1116, 1118,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1126, 1126, 1127,

     1128, 1129, 1129, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1153, 1154, 1154, 1154,
     1156, 1158, 1159, 1162, 1164, 1165, 1168, 1170, 1171, 1171,
     1172, 1172, 1172, 1174, 1176, 1178, 1180, 1181, 1182, 1183,
     1185, 1186, 1187, 1188, 1188, 1188, 1189, 1189, 1190, 1191,
     1193, 1194, 1196, 1198, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1201, 1203, 1205, 1207, 1209, 1209,
     1210, 1211, 1213, 1215, 1218, 1220, 1220, 1220, 1220, 1221,

     1223, 1225, 1227, 1229, 1231, 1232, 1234, 1234, 1235, 1235,
     1235, 1237, 1238, 1240, 1241, 1243, 1245, 1245, 1246, 1246,
     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1260, 1261, 1263, 1264, 1265, 1265, 1266,
     1266, 1269, 1270, 1272, 1272, 1272, 1274, 1276, 1277, 1278,
     1279, 1280, 1281, 1281, 1281, 1281, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1283, 1283, 1284, 1286, 1286, 1286,
     1288, 1289, 1289, 1290, 1290, 1290, 1290, 1291, 1291, 1292,
     1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302,

     1303, 1304, 1305, 1306, 1307, 1308, 1308, 1309, 1311, 1312,
     1312, 1312, 1313, 1313, 1313, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1318, 1318, 1319, 1319, 1320,
     1321, 1321, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1329, 1329, 1331, 1331, 1331, 1331, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1333, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1335, 1336, 1336, 1336, 1336,
     1336, 1337, 1337, 1338, 1338, 1339, 1339, 1340, 1341, 1342,
     1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1347, 1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349,
     1350, 1350, 1350, 1350, 1350, 1351, 1351, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354,
     1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1357, 1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   28,   42,   43,   44,   45,
       46,   47,   28,   48,   49,   50,   51,   52,   28,   53,
       54,   28,   55,   10,   56,   57,    1,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,   11,   13,   14,   15,   15,
       15,    1,   16,   17,   17,    1,   18,   19,   19,    1,
       20,    1,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    1,    1,   21,    1
    } ;

static yyconst flex_int16_t yy_base[1398] =
    {   0,
        0,    4,    9,   67,  125,    0,  183,    0,  240,  250,
      260,  270,  328,    0,  385,  389,  419,  423,  481,    0,
      538,  542,  573,    0,  627,    0,  685,    0,  396,  742,
      747,  751,  757,  762,  819,  876,  777,  808,  934,    0,
      991, 1048,  812,  856,  997, 1002,  847,  867, 1106,    0,
     1164,    0, 1210,    0, 1025, 1263, 1267, 1286, 1317,    0,
     1282, 1370, 1427, 1484, 1377, 1415, 1542,    0,    0,    0,
     1599, 1656, 3491, 6175, 6175, 6175, 6175,    1, 3463, 6175,
     6175, 6175, 1714, 6175, 6175, 6175,    2, 3452,    0, 6175,
     6175, 6175, 6175, 6175,    3, 3442,    0, 3423, 3416,    0,

        2, 3403, 3397, 6175, 6175, 6175, 6175, 6175,   10, 3415,
        0,    5, 3396, 6175,    0,    0, 6175,    0, 6175, 3394,
       11, 3398,    0,    0,    0,    0, 6175,   18, 3394,    0,
        0, 6175, 6175, 6175, 6175, 6175, 3377,   19, 3381,   48,
       34,  405, 6175, 6175, 6175,    0,    0, 6175,   41, 3379,
        0,    0,   16,   24,  246,  275,  277,  256,    0, 3390,
     3380, 6175, 3379,  242,   30,   59, 3365,  401,   41, 3364,
     3355, 3354, 3333,  256, 3337, 6175, 6175,   58, 6175, 6175,
     6175, 3332, 6175,  265, 3310, 6175,    0,  244, 6175, 6175,
     6175, 6175, 6175,  276, 3298, 6175, 6175, 6175,  277, 6175,

     6175, 6175,  281, 3297, 6175,    0, 6175, 6175,    0, 3303,
      291, 3284, 1746, 3243,    0,    0,    0, 6175,    0, 3281,
      292, 3259,    0,    0,    0, 6175,    0, 3265,  293, 3248,
        0,    0, 3255,  298,  232, 3209,  295,    0, 6175,  302,
      301,  416,  290,  417,    0, 6175, 6175,    0, 3239,  308,
     3230,    0,    0, 6175,    0,  381, 3226,    0, 6175, 6175,
     6175, 6175,  388, 3214,    0,  319, 3202, 6175, 6175, 6175,
     6175, 6175,  415, 3211,    0, 3222, 6175, 6175,    0, 6175,
     6175, 6175, 6175,  422, 3190,    0, 6175, 6175, 6175, 6175,
     6175,  432, 3189,    0, 6175,    0, 6175, 6175, 6175,  437,

     3175,  434, 6175, 6175, 6175, 6175, 6175, 6175, 3168, 6175,
     6175,  438, 3164, 6175, 6175, 6175, 6175, 6175, 6175,  439,
     3163,    0, 6175, 6175, 6175,    0, 6175,  445, 3156, 6175,
        0,    0, 6175,    0, 6175,  446, 3147,  434,    0, 3158,
     3150,    0, 6175, 1799, 6175,    0,  385,    0, 3123, 3117,
       16, 3117,  542, 3095, 3097, 3098, 3081, 3101, 3088,    0,
      421, 3069,  546,    0, 3087,  447, 1852,    0,  543,  544,
     1872, 6175, 3078,  552,  576, 6175,  580, 6175, 3084,  781,
        0, 3070, 3054, 1892, 6175,  534, 6175,  579,  769, 1912,
      466, 6175,  558, 3067, 6175,  551,  549, 1934, 6175, 3065,

      754, 6175, 6175,  794, 3054,  563, 3045, 3044, 3030, 3028,
     3005,  586, 3004,  775, 6175,  284, 3006, 3002,  462,  783,
        0, 6175, 3000, 6175,  471, 6175,    0, 6175,  576, 2982,
     1954, 1945, 2942, 2941, 2940, 2924, 2931, 2930, 2899, 2910,
     2894, 2880,    0, 6175, 2912, 1993,    0, 6175, 2903, 2013,
     6175, 2906, 2871,  823, 2847,  752,    0,    0, 2889, 2883,
     2037,  438, 2844,    0,  796, 2866, 2861, 2057,    0, 2851,
     2845, 2077,    0, 6175, 2850, 2815,    0, 6175,    0, 2832,
     2819, 6175,    0, 6175, 2832, 2821,  578, 2806, 2805, 2799,
     6175,    0,    0,  466,  784, 2097, 2769, 2751, 2777, 6175,

     6175,  760,  795, 2739, 2738, 2732, 2732, 2721, 6175, 2716,
     2716, 2702, 2698, 2696, 2697,    0, 2709,    0,    0, 2684,
     2675, 2670, 6175, 2660, 2659, 2679, 6175, 2678,  808,    0,
      811,    0,  822,  837,    0,  855,    0, 6175, 2676, 2671,
      837,  892, 1009, 2659,    0,    0,  829,  570,  834, 6175,
      871, 2672, 2670,  895,  400, 6175, 2656, 2668, 6175, 2651,
     6175, 6175, 2642,    0, 2611, 2601, 2592,  854, 2586, 2598,
     2597, 2573, 2568, 2550,  856,  761, 2547, 2534, 2527, 2530,
     2535, 2524, 2527, 2508,    0,    0,    0,    0, 2528, 6175,
     2505, 2542,    0,  904,    0, 2509, 2509,  905, 6175,    0,

        0, 2525,    0,    0, 2491, 6175, 2514, 6175, 2510,  899,
     2501, 6175, 2499, 6175, 6175,    0, 2480, 6175,  899, 2497,
     1032, 2470, 2447,  914, 2122, 2450, 2444, 2437, 2425, 2420,
     2425, 2417,    0,  918,  888, 2415, 2402, 2427, 6175,  912,
      857, 6175, 6175, 1014, 1035, 1225,    0, 1001, 2414, 6175,
     6175, 2399,  958, 1007, 2379, 6175, 2369, 2362, 2350, 2351,
     2340, 2341, 2346, 2341, 2337, 1060, 2330, 2321, 2325, 2314,
     2313, 2315, 2301, 2284, 1033, 2279,    0, 2276, 2284,    0,
     2273, 2304, 6175, 1069, 2279, 2293, 1325, 1382, 1387, 1394,
     6175, 2266, 2260, 6175, 6175, 1041, 2257, 2180, 1007, 2255,

     2242, 2252, 2254, 2282, 6175, 1055, 2240,    0, 1087, 2241,
     2236, 6175, 2231, 1221, 1271, 2082, 2082, 2083, 1067, 2081,
     2069, 2074, 2058, 2053, 2064, 2050, 1237, 1097, 2048, 1231,
     2045, 2041, 2031, 2031, 2029, 2038, 2022, 2020, 2012, 2007,
     2023, 2021, 2001, 2007, 1986, 1298, 1991, 2016, 2001, 1964,
     1090, 1402, 1408,  912, 1091, 1422, 1457, 1461, 1971, 2004,
     1056, 1964, 6175, 1293, 6175, 1303, 1038, 1964, 1997, 1989,
     1953, 1306, 1464, 1328, 1987, 1941, 1319, 1940, 1938, 1923,
     1930, 1929, 1940, 1926, 1913, 1331, 6175, 1338, 1922, 1919,
     1918, 1915, 1913, 1908, 1899, 1905, 1907, 1245, 1898, 1891,

     1894, 1896, 1885, 1888, 1373, 1891, 1881, 1477, 1611,  924,
     6175, 1616, 1624, 1631, 1911, 1444, 1336, 6175, 1452, 6175,
     1021, 1481, 1501, 1636, 1884, 6175, 1851, 1903, 1845, 1844,
     1842, 1840, 1831, 1830, 1822, 1828, 1813, 1504, 1825, 1830,
     1816, 1740, 1722, 1721, 1733, 1657, 1673, 1674, 1637, 1641,
     1626, 1606, 1613, 1599, 1390, 1608, 1646, 1651, 1857, 1877,
     1889,    0, 1597, 1517, 2236, 1630, 1576, 1520, 1589, 1587,
     1579, 1562, 1487, 1485, 1497, 1477, 1471,    0, 1461, 1460,
     1457, 1454, 1446, 1425, 1427, 1413, 1418, 1398, 1411, 6175,
        0, 2010, 2241, 2030, 2037, 2042,    0, 1401, 1523, 2246,

     2252, 1372,    0, 1356, 1357, 1350, 1344, 6175, 1319, 1303,
     1292, 1281, 1283, 1277, 1269, 1271, 6175, 2257, 2261, 2264,
     2268, 2272, 1270, 1606, 2277, 2017, 1254, 6175, 1228, 1236,
     1235, 1223, 1187, 1044, 1038, 1050, 1030, 2295, 2300, 2306,
     2321, 2326, 6175, 1672, 2330, 2335, 1035,  977,  954,  944,
      954,  823, 2341, 2353, 2348, 2364, 2369, 1685, 2375, 2389,
      717,  703,  551, 2394, 2401, 2406, 2417, 2428, 1690, 2422,
     2397,  556, 2432, 2438, 2443, 2454, 2459, 1695, 2463, 2475,
      260, 2481, 2486, 1700, 2508, 2492, 1775, 2519, 2497, 1897,
     2530, 2501, 1917, 2541, 2524, 1950, 2554, 2535, 1991, 2564,

     2546, 2074, 2577, 2583, 2102, 2588, 2594, 2599, 2603, 2609,
     2613, 2617, 2623, 2630, 2641, 2636, 2647, 2658, 2651, 2663,
     2676, 2681, 2689, 2695, 2700, 2705, 2711, 2716, 2721, 2725,
     2735, 2739, 2742, 2753, 2756, 2760, 2770, 2773, 2779, 2784,
     2789, 2795, 2800, 2806, 2809, 2819, 2823, 2826, 2837, 2840,
     2844, 2854, 2857, 2863, 2868, 2873, 2879, 2884, 2890, 2893,
     2903, 2907, 2910, 2921, 2924, 2928, 2938, 2941, 2947, 2952,
     2957, 2963, 2968, 2974, 2977, 2987, 2991, 2994, 3005, 3008,
     3012, 3022, 3025, 3031, 3036, 3041, 3047, 3052, 3058, 3061,
     3071, 3075, 3078, 3089, 3092, 3096, 3106, 3109, 3115, 3120,

     3125, 3131, 3136, 3142, 3145, 3155, 3159, 3162, 3173, 3176,
     3180, 3190, 3193, 3199, 3204, 3209, 3215, 3220, 3226, 3229,
     3239, 3243, 3246, 3257, 3260, 3264, 3274, 3277, 3283, 3288,
     3293, 3299, 3304, 3310, 3313, 3323, 3327, 3330, 3341, 3344,
     3348, 3358, 3361, 3367, 3372, 3377, 3383, 3388, 3394, 3397,
     3407, 3411, 3414, 3425, 3428, 3432, 3442, 3445, 3451, 3456,
     3461, 3467, 3472, 3478, 3481, 3491, 3495, 3498, 3509, 3512,
     3516, 3526, 3529, 3535, 3540, 3545, 3551, 3556, 3562, 3565,
     3575,  238, 3579, 3584, 3589, 3594, 3600, 3605, 3610, 3620,
     3624, 3637, 3647, 3642, 3653, 3658, 3663, 3666, 3669,  188,

     3673, 3677, 3680, 3683, 3686, 3690, 3695, 3700, 3706, 3711,
     3722, 3726, 3739, 3743, 3748, 3753, 3759, 3764, 3767, 3770,
     3775, 3779, 3782, 3785, 3788, 3792, 3796, 3801, 3806, 3812,
     3823, 3828, 3841, 3845, 3849, 3854, 3859, 3865, 3868, 3871,
     3876, 3881, 3884, 3887, 3890, 3894, 3898, 3902, 3907, 3912,
     3924, 3929, 3943, 3947, 3951, 3955, 3960, 3965, 3968, 3971,
     3977, 3982, 3985, 3988, 3991, 3996, 4000, 4004, 4008, 4013,
     4024, 4030, 4044, 4049, 4053, 4057, 6175, 4112, 4133, 4154,
     4175, 4196, 4217, 4238, 4259, 4280, 4301, 4322, 4343, 4364,
     4385, 4406, 4427, 4448, 4469, 4490, 1212, 1433, 1455, 4511,

     4532, 4553, 4574, 4595, 4614, 4633, 4654, 4675, 4694, 4713,
     4732, 4750, 1479, 4769, 4790, 4809, 4830, 4851, 4872, 4893,
     4914, 4935, 1499, 1515, 1518, 4956, 1521, 4977, 4998, 5017,
     5036, 5052, 1587, 1593, 5069, 5090, 1648, 5111, 5132, 5153,
     5174, 5195, 5216, 5237, 5256, 5275, 5296, 5315, 5334, 5353,
     5371, 1650, 5390, 5411, 5430, 5451, 5472, 5493, 5514, 5535,
     5556, 1666, 1677, 1694, 1769, 5577, 5598, 5617, 5636, 5657,
     1776, 5678, 5699, 1777, 5720, 5741, 5762, 5783, 5804, 5825,
     5846, 5865, 5884, 5905, 5926, 5947, 5968, 5989, 6010, 6031,
     6052, 6071, 6090, 1778, 6111, 6132, 6153

    } ;

static yyconst flex_int16_t yy_def[1398] =
    {   0,
     1278, 1278, 1278, 1277, 1277,    5, 1277,    7, 1279, 1279,
     1280, 1280, 1277,   13, 1281, 1281, 1282, 1282, 1277,   19,
     1283, 1283,   19,   23, 1277,   25, 1277,   27, 1284, 1285,
     1278, 1278, 1278, 1278, 1286, 1286, 1287, 1287, 1277,   39,
     1286, 1286, 1288, 1288, 1289, 1289, 1290, 1290, 1277,   49,
     1277,   51,   51,   53, 1291, 1291, 1292, 1292,   23,   59,
     1293, 1293, 1294, 1294, 1295, 1295, 1277,   67,   67,   67,
     1296, 1296, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1297, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1298, 1298, 1298, 1298,

     1298, 1298, 1298, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1299, 1299, 1299, 1277, 1300, 1300, 1277, 1300, 1277, 1301,
     1277, 1300, 1300, 1302, 1302, 1302, 1277, 1302, 1302, 1303,
     1302, 1277, 1277, 1277, 1277, 1277, 1304, 1277, 1277, 1305,
     1277, 1305, 1277, 1277, 1277, 1306, 1306, 1277, 1306, 1306,
     1307, 1306, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1310,
     1310, 1277, 1310, 1310, 1310, 1277, 1310, 1311, 1277, 1277,
     1277, 1277, 1277, 1312, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1313, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1314, 1277,

     1277, 1277, 1277, 1277, 1277, 1315, 1277, 1277, 1315, 1277,
     1277, 1315, 1277, 1277, 1315, 1316, 1316, 1277, 1316, 1277,
     1316, 1316, 1316, 1317, 1317, 1277, 1317, 1277, 1317, 1317,
     1313, 1317, 1277, 1277, 1277, 1277, 1318, 1319, 1277, 1318,
     1320, 1318, 1277, 1318, 1321, 1277, 1277, 1321, 1277, 1321,
     1321, 1321, 1322, 1277, 1322, 1322, 1322, 1322, 1277, 1277,
     1277, 1277, 1277, 1277, 1323, 1277, 1323, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1324, 1277, 1277, 1277, 1325, 1277,
     1277, 1277, 1277, 1277, 1277, 1326, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1326, 1277, 1327, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1328, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1329, 1277, 1277, 1277, 1330, 1277, 1277, 1277, 1277,
     1331, 1331, 1277, 1331, 1277, 1277, 1331, 1277, 1331, 1277,
     1277, 1332, 1277, 1277, 1277, 1333, 1333, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1336, 1337,
     1337, 1337, 1337, 1338, 1339, 1340, 1338, 1341, 1342, 1343,
     1341, 1277, 1277, 1344, 1277, 1277, 1345, 1277, 1277, 1345,
     1346, 1346, 1346, 1346, 1277, 1347, 1277, 1347, 1347, 1347,
     1277, 1277, 1348, 1349, 1277, 1349, 1349, 1349, 1277, 1277,

     1277, 1277, 1277, 1350, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1351, 1277, 1277, 1277, 1277, 1277, 1277,
     1352, 1277, 1277, 1277, 1353, 1277, 1354, 1277, 1277, 1277,
     1354, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1355, 1277, 1355, 1355, 1356, 1277, 1356, 1356,
     1277, 1277, 1277, 1277, 1277, 1357, 1358, 1359, 1359, 1359,
     1357, 1277, 1277, 1360, 1277, 1277, 1360, 1360, 1361, 1361,
     1361, 1361, 1362, 1277, 1277, 1362, 1363, 1277, 1364, 1277,
     1277, 1277, 1365, 1277, 1277, 1366, 1367, 1277, 1277, 1277,
     1277, 1368, 1369, 1277, 1277, 1369, 1277, 1277, 1277, 1277,

     1277, 1277, 1370, 1371, 1371, 1371, 1371, 1371, 1277, 1371,
     1371, 1371, 1371, 1371, 1371, 1372, 1372, 1373, 1373, 1374,
     1374, 1374, 1277, 1374, 1374, 1375, 1277, 1277, 1277, 1376,
     1377, 1378, 1377, 1379, 1380, 1379, 1381, 1277, 1277, 1277,
     1277, 1277, 1382, 1383, 1383, 1383, 1384, 1384, 1384, 1277,
     1385, 1385, 1385, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1354, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1355, 1355, 1356, 1356, 1277, 1277,
     1277, 1359, 1359, 1357, 1359, 1277, 1277, 1277, 1277, 1360,

     1360, 1361, 1361, 1361, 1362, 1277, 1386, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1369, 1277, 1277, 1370, 1387,
     1277, 1371, 1371, 1371, 1277, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1372, 1374, 1374, 1374, 1374, 1388, 1277, 1277,
     1377, 1277, 1277, 1277, 1277, 1382, 1383, 1384, 1385, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1359, 1277, 1277, 1361,
     1362, 1389, 1277, 1277, 1277, 1387, 1390, 1277, 1277, 1277,
     1277, 1371, 1371, 1277, 1277, 1277, 1371, 1277, 1371, 1371,

     1371, 1371, 1371, 1371, 1277, 1277, 1374, 1374, 1374, 1277,
     1277, 1277, 1277, 1277, 1382, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1362, 1277, 1277, 1277,
     1390, 1390, 1390, 1277, 1390, 1277, 1277, 1277, 1371, 1371,
     1277, 1277, 1277, 1277, 1277, 1371, 1371, 1371, 1371, 1277,
     1277, 1277, 1382, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1391, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1362, 1277, 1390, 1390, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1392, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1393, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1391, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1362, 1277, 1390, 1390, 1277, 1277,
     1277, 1394, 1277, 1277, 1277, 1277, 1393, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1395, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1396, 1390, 1390, 1277, 1277, 1277, 1394, 1277, 1277, 1277,

     1277, 1277, 1397, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1390, 1390, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1390, 1390, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1390, 1390, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1390, 1390, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1390, 1390, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1390, 1390, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277,    0, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277

    } ;

static yyconst flex_int16_t yy_nxt[6234] =
    {   0,
     1277,   75,  391,   76,   77,   75, 1277,   76,   77, 1277,
       75,  392,   76,   77,  340,  340,  340,   78,  341,  341,
      341,   78,  387,  358,  358,   79,   78,  359,  359,   79,
      387,  369,  340,  395,   79,  370,  341,  378,  379,  353,
      387, 1277,  351,  406,  352,  354,  355,  361,  387,  362,
      375,  375,  375,  407,  382,  398,  506,   80,  383,  376,
      416,   80,  399,  400,  507,  417,   80,   81,   82,   83,
       84,   85,   81,   81,   86,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   87,   81,   81,   81,   81,   81,
       81,   81,   88,   81,   89,   89,   81,   81,   81,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   81,   81,   81,   90,   91,   92,   91,   93,   94,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   95,   91,   91,   91,   91,   91,   91,   91,
       96,   91,   97,   97,   91,   91,   91,   97,   97,   98,
       99,  100,   97,   97,   97,  101,   97,   97,   97,   97,
       97,  102,   97,   97,   97,  103,   97,   97,   97,   91,
       91,   91,  104,  105,  106,  105,  107,  108,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      109,  105,  105,  105,  105,  105,  105,  105,  110,  105,
      111,  111,  105,  105,  105,  111,  111,  111,  111,  112,
      111,  111,  111,  113,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  105,  105,  105,
      114,  116,  826,  117,  118,  395,  119,  422,  423,  376,
      120,  116,  387,  117,  118,  396,  119,  121,  412,  397,
      120,  125,  387,   76,  126,  122,  127,  121,  453,  454,
      387,  125,  413,   76,  126,  122,  127,  128,  419,  425,
      387,  387,  420,  387,  426,  129,  416,  128,  388,  358,
      130,  417,  389,  359,  358,  129,  457,  123,  359,  387,

      130,  387,  390,  457,  429,  340,  340,  123,  430,  445,
      449,  452,  458,  590,  459,  341,  462,  131,  460,  458,
      462,  466,  474,  475,  463,  467,  435,  131,  132,  133,
      132,  134,  135,  132,  136,  132,  132,  132,  137,  132,
      132,  132,  132,  132,  132,  138,  132,  132,  132,  132,
      132,  132,  132,  139,  132,  140,  140,  132,  141,  132,
      140,  140,  140,  140,  142,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  143,  144,  132,  145,  147,  502,   76,   77,
      147,  148,   76,   77,  470,  148,  503,  191,  471,  192,

      193,  340,  149,  401,  402,  341,  149,  375,  375,  375,
      150,  403,  403,  194,  150,  151,  376,  457,  457,  151,
      154,  195,   76,  155,  154,   74,   76,  155,  340,   74,
      405,  405,  341,  458,  458,  480,  156,  484,  485,  481,
      156,  461,  152,   74,  157,  340,  152,   74,  157,  341,
      340,  488,  489,  196,  341,  341,  490,  380,  340,  494,
      497,  520,  341,  495,  497,  529,  529,  559,  391,  521,
      498,  612,  596,  425,  567,  560,  158,  392,  426,  613,
      158,   74,   75,   74,   76,   77,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   78,   74,

       74,   74,   74,   74,   74,   74,   79,   74,  159,  159,
       74,   74,   74,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,   74,   74,   74,   80,  161,
      387,  162,  163,  161,  509,  162,  163,  509,  523,  532,
      535,  523,  395,  509,  395,  164,  533,  523,  387,  164,
      391,  536,  540,  165,  551,  406,  552,  165,  166,  392,
      541,  541,  166,  532,  535,  407,  387,  510,  542,  542,
      542,  524,  375,  375,  375,  387,  511,  376,  412,  499,
      525,  376,  547,  428,  387,  167,  610,  610,  981,  167,

      168,  168,  413,  387,  590,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,   74,   75,  169,
       76,   77,   74,   74,   74,   74,   74,   74,  170,  171,
       74,  172,   74,  173,   78,   74,   74,   74,   74,   74,
       74,   74,   79,   74,  174,  174,   74,  175,   74,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,   74,   74,   74,   80,  176,  177,  178,  179,  180,
      176,  181,  182,  176,  176,  183,  176,  176,  176,  176,

      176,  176,  184,  176,  176,  176,  176,  176,  176,  176,
      185,  186,  187,  187,  176,  188,  176,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  176,
      176,  176,  189,  198,  199,  200,  201,  972,   75,  202,
       76,   77,   75,  457,   76,   77,  401,  402,   75,  203,
       76,   77,  502,   75,   78,   76,   77,  204,   78,  458,
      719,  503,   79,  554,   78,  387,   79,  412,  217,   78,
      218,  219,   79,  375,  375,  375,  548,   79,  561,  614,
      220,  413,  376,  387,  221,  665,  401,  402,  598,  205,

      562,  615,  222,  599,   80,  403,  620,  621,   80,  217,
      666,  218,  219,  238,   80,  239,  240,  532,  639,   80,
      207,  220,  208,  209,  405,  221,  640,  640,  532,  241,
      543,  590,  210,  222,  223,  387,  211,  242,  243,  641,
      387,  532,  243,  535,  212,  213,  648,  643,  254,  213,
      239,  255,  532,  387,  590,  644,  644,  238,  387,  239,
      240,  535,  656,  532,  256,  223,  590,  535,  254,  244,
      239,  255,  257,  241,  395,  214,  215,  207,  590,  208,
      209,  242,  243,  656,  256,  535,  243,  532,  649,  210,
      706,  663,  257,  211,  645,  645,  645,  650,  650,  650,

      664,  212,  213,  376,  258,  457,  213,  598,  656,  683,
      620,  621,  599,  244,  810,  811,  694,  684,  684,  694,
      705,  458,  527,  705,  258,  694,  810,  811,  707,  705,
      711,  711,  214,  215,  224,  225,  224,  226,  227,  224,
      224,  224,  224,  224,  224,  224,  224,  228,  224,  224,
      224,  229,  224,  224,  224,  224,  224,  224,  224,  230,
      224,  231,  231,  224,  224,  224,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  224,  224,
      224,  232,  207,  716,  208,  209,  963,  590,  246,  962,

      247,  248,  717,  246,  233,  247,  248,  387,  234,  764,
      249,  375,  375,  375,  250,  249,  212,  235,  765,  250,
      376,  235,  251,  821,  712,  387,  281,  251,   76,  282,
      666,  283,  713,  713,  688,  689,  690,  714,  714,  714,
      819,  718,  284,  761,  820,  646,  376,  236,  215,  207,
      285,  208,  209,  691,  252,  286,  719,  706,  761,  252,
      820,  233,  730,  730,  730,  234,  863,  738,  739,  777,
      777,  777,  740,  212,  235,  741,  742,  961,  235,  608,
      743,  762,  287,  590,  744,  745,  691,  749,  749,  523,
      952,  590,  523, 1277, 1277,  771,  762,  590,  523,  786,

      787,  788,  754,  754,  236,  215,  259,  260,  259,  261,
      262,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  263,  259,  259,  259,  259,  259,  259,
      259,  264,  259,  265,  265,  259,  266,  259,  265,  265,
      265,  267,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      259,  259,  259,  268,  269,  270,  269,  271,  272,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  273,  269,  269,  269,  269,  269,  269,  269,  274,
      269,  275,  275,  269,  276,  269,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  269,  269,
      269,  277,  278,  772,  772,  772,  347,  375,  375,  375,
      347,  951,  376,  730,  730,  730,  376,  279,  279,  730,
      730,  730,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  281,  950,   76,  282,  289,  283,
       76,  290,  715,  375,  375,  375,  949,  291,  948,  848,
      284,  719,  376,  298,  292,   93,  299,  289,  285,   76,
      290,  785,  293,  286,  590,  764,  291,  294,  947,  300,

      805,  787,  788,  292,  765,  817,  943,  301,  823,  823,
      823,  293,  302,  937,  818,  773,  294,  376,  936,  935,
      287,  777,  777,  777,  295,  934,  933,  752,  689,  753,
      777,  777,  777,  786,  787,  788,  932,  754,  817,  303,
      788,  787,  788,  295,  296,  296,  755,  818,  931,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  298,  666,   93,  299,  805,  787,  788,  317,  755,
       76,  318,  827,  319,  756,  757,  758,  300,  930,  758,
      758,  758,  889,  719,  320,  301,  758,  758,  758,  929,

      302,  890,  321,  691,  808,  757,  809,  322,  691,  719,
      809,  758,  809,  889,  754,  691,  317,  927,   76,  318,
      754,  319,  890,  755,  812,  813,  814,  303,  305,  755,
      306,  307,  320,  308,  323,  923,  691,  309,  310,  311,
      321,  691,  916,  691,  312,  322,  694,  348,  691,  694,
      915,  348,  313,  314,  819,  694,  755,  914,  820,  814,
      814,  814,  755,  814,  814,  814,  824,  824,  824,  360,
      825,  913,  323,  360,  820,  376,  691,  912,  691,  857,
      813,  858,  691,  705,  315,  305,  705,  306,  307,  754,
      308,  911,  705,  421,  309,  310,  311,  421,  755,  910,

      666,  312,  909,  864,  864,  864,  730,  730,  730,  313,
      314,  691,  376,  473,  666,  691,  907,  473,  826,  899,
      899,  899,  777,  777,  777,  924,  924,  924,  376,  477,
      719,  755,  479,  477,  376,  483,  479,  906,  719,  483,
      719,  315,  324,  325,  326,   76,  327,  326,  324,  324,
      324,  326,  324,  326,  326,  324,  324,  326,  326,  328,
      326,  326,  326,  324,  324,  324,  324,  329,  324,  326,
      326,  324,  324,  324,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  324,  324,  324,  330,

      332,  347,  333,  334,  335,  347,  905,  348,  944,  944,
      944,  348,  335,  858,  814,  858,  336,  376,  859,  860,
      861,  904,  903,  754,  337,  338,  861,  861,  861,  338,
      902,  868,  755,  861,  861,  861,  901,  691,  865,  865,
      865,  898,  825,  891,  888,  691,  887,  376,  892,  860,
      893,  886,  691,  893,  861,  893,  339,  332,  754,  333,
      334,  335,  360,  754,  421,  755,  360,  755,  421,  335,
      691,  885,  755,  336,  958,  958,  958,  884,  691,  883,
      473,  337,  338,  376,  473,  691,  338,  969,  969,  969,
      826,  477,  978,  978,  978,  477,  376,  984,  984,  984,

      755,  376,  987,  987,  987,  755,  376,  882,  479,  590,
      666,  376,  479,  339,  343,  343,  344,  343,  343,  343,
      343,  345,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  346,  346,  343,  343,  343,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  343,  343,
      343,  343,  432,  881,  666,  666,  432,  990,  990,  990,
      433,  434,  435,  483,  880,  436,  376,  483,  437,  438,
      348,  360,  897,  439,  348,  360,  897,  440,  441,  343,

      343,  344,  343,  343,  343,  343,  345,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  346,  346,  343,  343,
      343,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  343,  343,  343,  343,  530,  879,  894,
      895,  896,  501,  530,  530,  878,  877,  530,  838,  501,
      876,  875,  874,  873,  530,  530,  530,  537,  691,  896,
      896,  896,  537,  537,  537,  872,  871,  537,  870,  537,
      869,  896,  896,  896,  537,  537,  537,  546,  691,  993,

      993,  993,  546,  546,  546,  828,  868,  546,  376,  546,
      691,  691,  866,  815,  546,  546,  546,  549,  387,  996,
      996,  996,  549,  549,  549,  856,  855,  549,  376,  549,
      854,  691,  853,  852,  549,  549,  550,  395,  851,  553,
      850,  849,  847,  691,  553,  553,  553,  846,  845,  553,
      844,  553,  999,  999,  999,  843,  553,  553,  553,  564,
      842,  376,  841,  840,  564,  564,  564,  839,  838,  564,
      836,  501,  835,  834,  833,  832,  564,  564,  564,  565,
      566,  567,  568,  831,  569,  830,  829,  570,  571,  828,
      822,  770,  572, 1002, 1002, 1002,  573,  574,  586,  821,

      767,  816,  376,  586,  586,  586,  815,  350,  586,  807,
      586,  608,  918,  895,  919,  586,  586,  586,  588,  946,
      946,  946,  754,  588,  588,  588,  608,  806,  588,  804,
      588,  755,  920,  921,  922,  588,  588,  588,  457,  922,
      922,  922,  594,  803,  922,  922,  922,  594,  594,  594,
      802,  691,  594,  801,  595,  800,  799,  798,  691,  594,
      594,  594,  601,  691,  755,  797,  796,  601,  601,  601,
      795,  826,  601,  794,  601,  793, 1005, 1005, 1005,  601,
      601,  601,  604,  792,  691,  376,  791,  604,  604,  604,
      790,  691,  604,  789,  604,  784,  691,  783,  782,  604,

      604,  604,  501,  781, 1008, 1008, 1008,  616,  616,  616,
      780,  779,  616,  376,  501,  778,  776,  775,  774,  616,
      616,  616,  695,  695,  696,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      348,  348,  348,  695,  695,  695,  695,  695,  695,  348,
      348,  695,  695,  695,  348,  348,  348,  348,  348,  348,
      348,  348,  697,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  695,  695,  695,  695,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  348,  348,

      348,  763,  763,  763,  763,  763,  763,  348,  348,  763,
      763,  763,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  763,  763,  763,  763,  900,  900,
      900,  712,  825,  919,  896,  919,  527,  376,  925,  925,
      925,  527,  825,  754,  926,  926,  926,  376,  825,  938,
      921,  939,  755,  939,  922,  939,  940,  941,  942,  754,
      942,  942,  942,  754,  942,  942,  942,  634,  755,  945,
      945,  945,  755,  825,  770,  691,  769,  768,  376,  691,
      826,  767,  766,  691,  624,  755,  760,  953,  941,  954,

      826,  759,  954,  942,  954,  687,  826,  754,  955,  956,
      957,  755,  754,  750,  608,  755,  755,  747,  691,  746,
      717,  755,  691,  957,  957,  957,  691,  691,  957,  957,
      957,  826,  959,  959,  959,  676,  825,  960,  960,  960,
      674,  376,  691,  964,  956,  965,  737,  691,  736,  755,
      966,  967,  968,  754,  755,  965,  957,  965,  735,  734,
      691,  733,  755,  732,  731,  754,  968,  968,  968,  691,
      729,  968,  968,  968,  755,  691,  728,  970,  970,  970,
      691,  825,  727,  726,  826,  691,  376,  725,  724,  826,
      691,  971,  971,  971,  723,  755,  973,  967,  974,  980,

      980,  980,  691,  974,  968,  974,  754,  755,  975,  976,
      977,  722,  721,  754,  720,  755,  652,  395,  691,  977,
      977,  977,  755,  691,  979,  979,  979,  691,  825,  826,
      977,  977,  977,  376,  982,  976,  983,  527,  691,  709,
      983,  977,  983,  826,  754,  975,  976,  977,  755,  691,
      754,  826,  708,  755,  704,  755,  977,  977,  977,  755,
      691,  977,  977,  977,  691,  985,  985,  985,  703,  825,
      702,  691,  701,  700,  376,  691,  826,  986,  986,  986,
      691,  699,  691,  982,  976,  983,  755,  698,  983,  977,
      983,  693,  755,  754,  989,  989,  989,  691,  754,  992,

      992,  992,  755,  995,  995,  995,  692,  755,  691,  687,
      988,  988,  988,  691,  825,  685,  618,  826,  618,  376,
      608,  991,  991,  991,  608,  825,  998,  998,  998,  826,
      376,  681,  994,  994,  994,  755,  825, 1001, 1001, 1001,
      755,  376,  680,  997,  997,  997,  826,  825, 1004, 1004,
     1004,  826,  376,  679,  678,  826, 1000, 1000, 1000,  677,
      825,  676,  826,  675,  674,  376, 1003, 1003, 1003,  673,
      825,  672,  671,  826,  670,  376,  669,  668,  826, 1006,
     1006, 1006,  667,  825,  826, 1007, 1007, 1007,  376,  826,
     1009, 1009, 1009,  662,  825,  826, 1010, 1010, 1010,  376,

      826, 1011, 1011, 1011,  661, 1012, 1012, 1012,  826,  825,
      376, 1013, 1013, 1013,  376, 1014, 1014, 1014,  826, 1015,
     1015, 1015,  660,  825,  376, 1016, 1016, 1016,  376,  659,
      658,  826, 1017, 1017, 1017,  657,  655,  826, 1019, 1019,
     1019,  376,  826, 1018, 1018, 1018,  654,  825,  826, 1020,
     1020, 1020,  376, 1022, 1022, 1022,  653,  826,  376,  652,
     1021, 1021, 1021,  826,  825, 1023, 1023, 1023,  618,  376,
      558,  826,  651,  395,  376,  395,  647,  826, 1024, 1024,
     1024,  642,  825, 1025, 1025, 1025,  642,  376,  527,  527,
      826, 1026, 1026, 1026,  524,  826,  637, 1027, 1027, 1027,

      376,  825, 1028, 1028, 1028,  826,  376, 1029, 1029, 1029,
      636,  635,  826, 1030, 1030, 1030,  376,  825, 1031, 1031,
     1031,  634,  376, 1032, 1032, 1032,  633, 1033, 1033, 1033,
      826,  825,  376,  632,  631,  826,  376, 1034, 1034, 1034,
      630, 1035, 1035, 1035, 1036, 1036, 1036,  629,  825,  826,
      376,  628,  627,  376,  826, 1037, 1037, 1037, 1038, 1038,
     1038,  626, 1039, 1039, 1039,  826,  825,  376,  625,  624,
      826,  376, 1040, 1040, 1040, 1041, 1041, 1041,  623,  826,
      622, 1042, 1042, 1042,  376,  825, 1043, 1043, 1043,  826,
      376, 1044, 1044, 1044,  618,  617,  826, 1045, 1045, 1045,

      376,  825, 1046, 1046, 1046,  567,  376,  826, 1047, 1047,
     1047, 1048, 1048, 1048,  826,  825,  500,  376,  499,  611,
      376, 1049, 1049, 1049,  826, 1050, 1050, 1050, 1051, 1051,
     1051,  608,  825,  826,  376,  484,  606,  376,  826, 1052,
     1052, 1052, 1053, 1053, 1053,  499, 1054, 1054, 1054,  826,
      825,  376,  605,  474,  826,  376, 1055, 1055, 1055, 1056,
     1056, 1056,  603,  826,  602, 1057, 1057, 1057,  376,  825,
     1058, 1058, 1058,  826,  376, 1059, 1059, 1059,  600,  499,
      826, 1060, 1060, 1060,  376,  825, 1061, 1061, 1061,  597,
      376,  826, 1062, 1062, 1062, 1063, 1063, 1063,  826,  825,

      593,  376,  592,  591,  376, 1064, 1064, 1064,  826, 1065,
     1065, 1065, 1066, 1066, 1066,  589,  825,  826,  376,  499,
      587,  376,  826, 1067, 1067, 1067, 1068, 1068, 1068,  585,
     1069, 1069, 1069,  826,  825,  376,  584,  583,  826,  376,
     1070, 1070, 1070, 1071, 1071, 1071,  582,  826,  581, 1072,
     1072, 1072,  376,  825, 1073, 1073, 1073,  826,  376, 1074,
     1074, 1074,  580,  579,  826, 1075, 1075, 1075,  376,  825,
     1076, 1076, 1076,  578,  376,  826, 1077, 1077, 1077, 1078,
     1078, 1078,  826,  825,  577,  376,  576,  575,  376, 1079,
     1079, 1079,  826, 1080, 1080, 1080, 1081, 1081, 1081,  563,

      825,  826,  376,  422,  558,  376,  826, 1082, 1082, 1082,
     1083, 1083, 1083,  418, 1084, 1084, 1084,  826,  825,  376,
      557,  556,  826,  376, 1085, 1085, 1085, 1086, 1086, 1086,
      410,  826,  409, 1087, 1087, 1087,  376,  825, 1088, 1088,
     1088,  826,  376, 1089, 1089, 1089,  408,  409,  826, 1090,
     1090, 1090,  376,  825, 1091, 1091, 1091,  555,  376,  826,
     1092, 1092, 1092, 1093, 1093, 1093,  826,  825,  399,  376,
      395,  545,  376, 1094, 1094, 1094,  826, 1095, 1095, 1095,
     1096, 1096, 1096,  544,  825,  826,  376,  378,  538,  376,
      826, 1097, 1097, 1097, 1098, 1098, 1098,  527, 1099, 1099,

     1099,  826,  825,  376,  522,  519,  826,  376, 1100, 1100,
     1100, 1101, 1101, 1101,  517,  826,  515, 1102, 1102, 1102,
      376,  825, 1103, 1103, 1103,  826,  376, 1104, 1104, 1104,
      514,  513,  826, 1105, 1105, 1105,  376,  825, 1106, 1106,
     1106,  512,  376,  826, 1107, 1107, 1107, 1108, 1108, 1108,
      826,  825,  508,  376,  505,  504,  376, 1109, 1109, 1109,
      826, 1110, 1110, 1110, 1111, 1111, 1111,  500,  825,  826,
      376,  499,  496,  376,  826, 1112, 1112, 1112, 1113, 1113,
     1113,  342, 1114, 1114, 1114,  826,  825,  376,  342,  342,
      826,  376, 1115, 1115, 1115, 1116, 1116, 1116,  487,  826,

      342, 1117, 1117, 1117,  376,  825, 1118, 1118, 1118,  826,
      376, 1119, 1119, 1119,  342,  342,  826, 1120, 1120, 1120,
      376,  825, 1121, 1121, 1121,  478,  376,  826, 1122, 1122,
     1122, 1123, 1123, 1123,  826,  825,  342,  376,  476,  342,
      376, 1124, 1124, 1124,  826, 1125, 1125, 1125, 1126, 1126,
     1126,  472,  825,  826,  376,  468,  465,  376,  826, 1127,
     1127, 1127, 1128, 1128, 1128,  455, 1129, 1129, 1129,  826,
      825,  376,  451,  450,  826,  376, 1130, 1130, 1130, 1131,
     1131, 1131,  448,  826,  446, 1132, 1132, 1132,  376,  825,
     1133, 1133, 1133,  826,  376, 1134, 1134, 1134,  444,  442,

      826, 1135, 1135, 1135,  376,  825, 1136, 1136, 1136,  431,
      376,  826, 1137, 1137, 1137, 1138, 1138, 1138,  826,  825,
      428,  376,  342,  342,  376, 1139, 1139, 1139,  826, 1140,
     1140, 1140, 1141, 1141, 1141,  342,  825,  826,  376,  418,
      415,  376,  826, 1142, 1142, 1142, 1143, 1143, 1143,  411,
     1144, 1144, 1144,  826,  825,  376,  410,  409,  826,  376,
     1145, 1145, 1145, 1146, 1146, 1146,  408,  826,  395, 1147,
     1147, 1147,  376,  825, 1148, 1148, 1148,  826,  376, 1149,
     1149, 1149,  395,  395,  826, 1150, 1150, 1150,  376,  825,
     1151, 1151, 1151,  395,  376,  826, 1152, 1152, 1152, 1153,

     1153, 1153,  826,  825,  384,  376,  342,  374,  376, 1154,
     1154, 1154,  826, 1155, 1155, 1155, 1156, 1156, 1156,  371,
      825,  826,  376,  367,  366,  376,  826, 1157, 1157, 1157,
     1158, 1158, 1158,  363, 1159, 1159, 1159,  826,  825,  376,
      342,  357,  826,  376, 1160, 1160, 1160, 1161, 1161, 1161,
      356,  826,  350, 1162, 1162, 1162,  376,  825, 1163, 1163,
     1163,  826,  376, 1164, 1164, 1164,  349,  342,  826, 1165,
     1165, 1165,  376,  825, 1166, 1166, 1166,  342,  376,  826,
     1167, 1167, 1167, 1168, 1168, 1168,  826,  825,  342,  376,
     1277, 1277,  376, 1169, 1169, 1169,  826, 1170, 1170, 1170,

     1171, 1171, 1171, 1277,  825,  826,  376, 1277, 1277,  376,
      826, 1172, 1172, 1172, 1173, 1173, 1173, 1277, 1174, 1174,
     1174,  826,  825,  376, 1277, 1277,  826,  376, 1175, 1175,
     1175, 1176, 1176, 1176, 1277,  826, 1277, 1177, 1177, 1177,
      376,  825, 1178, 1178, 1178,  826,  376, 1179, 1179, 1179,
     1277, 1277,  826, 1180, 1180, 1180,  376,  825, 1181, 1181,
     1181, 1277,  376,  826, 1182, 1182, 1182, 1183, 1183, 1183,
      826,  825, 1277,  376, 1277, 1277,  376, 1184, 1184, 1184,
      826, 1185, 1185, 1185, 1277,  825, 1186, 1186, 1186,  826,
      376, 1187, 1187, 1187,  826,  825, 1188, 1188, 1188, 1277,

      376, 1277, 1189, 1189, 1189,  826,  825, 1190, 1190, 1190,
      826,  376, 1191, 1191, 1191, 1277,  825, 1277, 1277,  826,
     1277,  376, 1192, 1192, 1192, 1277, 1193, 1193, 1193,  826,
      825, 1277, 1277,  826, 1277,  376, 1277, 1277,  826, 1194,
     1194, 1194, 1277,  826, 1196, 1196, 1196, 1277,  826, 1195,
     1195, 1195, 1277,  825,  826, 1197, 1197, 1197,  376,  826,
     1198, 1198, 1198, 1277,  826, 1199, 1199, 1199, 1200, 1200,
     1200, 1201, 1201, 1201,  826, 1202, 1202, 1202,  826, 1203,
     1203, 1203, 1204, 1204, 1204, 1205, 1205, 1205, 1206, 1206,
     1206,  826, 1207, 1207, 1207, 1277,  826, 1208, 1208, 1208,

     1277,  826, 1209, 1209, 1209, 1277, 1277,  826, 1210, 1210,
     1210, 1277,  826, 1211, 1211, 1211, 1277,  826, 1277, 1277,
      826, 1277, 1277,  826, 1212, 1212, 1212,  826, 1213, 1213,
     1213,  826, 1277, 1277,  826, 1277, 1277,  826, 1277, 1277,
      826, 1214, 1214, 1214,  826, 1215, 1215, 1215, 1277,  826,
     1216, 1216, 1216, 1277,  826, 1217, 1217, 1217, 1277, 1277,
      826, 1218, 1218, 1218, 1277,  826, 1219, 1219, 1219, 1220,
     1220, 1220, 1221, 1221, 1221, 1277,  826, 1222, 1222, 1222,
      826, 1223, 1223, 1223, 1224, 1224, 1224, 1225, 1225, 1225,
     1226, 1226, 1226,  826, 1227, 1227, 1227,  826, 1228, 1228,

     1228, 1277,  826, 1229, 1229, 1229, 1277,  826, 1230, 1230,
     1230, 1277, 1277,  826, 1231, 1231, 1231, 1277,  826, 1277,
     1277,  826, 1277, 1277,  826, 1232, 1232, 1232, 1277,  826,
     1233, 1233, 1233,  826, 1277, 1277,  826, 1277, 1277,  826,
     1277, 1277,  826, 1234, 1234, 1234,  826, 1235, 1235, 1235,
      826, 1236, 1236, 1236, 1277,  826, 1237, 1237, 1237, 1277,
      826, 1238, 1238, 1238, 1277, 1277,  826, 1239, 1239, 1239,
     1240, 1240, 1240, 1241, 1241, 1241, 1277,  826, 1242, 1242,
     1242, 1277,  826, 1243, 1243, 1243, 1244, 1244, 1244, 1245,
     1245, 1245, 1246, 1246, 1246,  826, 1247, 1247, 1247,  826,

     1248, 1248, 1248,  826, 1249, 1249, 1249, 1277,  826, 1250,
     1250, 1250, 1277,  826, 1251, 1251, 1251, 1277, 1277,  826,
     1277, 1277,  826, 1277, 1277,  826, 1252, 1252, 1252, 1277,
      826, 1253, 1253, 1253, 1277,  826, 1277, 1277,  826, 1277,
     1277,  826, 1277, 1277,  826, 1254, 1254, 1254,  826, 1255,
     1255, 1255,  826, 1256, 1256, 1256,  826, 1257, 1257, 1257,
     1277,  826, 1258, 1258, 1258, 1277,  826, 1259, 1259, 1259,
     1260, 1260, 1260, 1261, 1261, 1261, 1277, 1277,  826, 1262,
     1262, 1262, 1277,  826, 1263, 1263, 1263, 1264, 1264, 1264,
     1265, 1265, 1265, 1266, 1266, 1266, 1277,  826, 1267, 1267,

     1267,  826, 1268, 1268, 1268,  826, 1269, 1269, 1269,  826,
     1270, 1270, 1270, 1277,  826, 1271, 1271, 1271, 1277,  826,
     1277, 1277,  826, 1277, 1277,  826, 1272, 1272, 1272, 1277,
     1277,  826, 1273, 1273, 1273, 1277,  826, 1277, 1277,  826,
     1277, 1277,  826, 1277, 1277,  826, 1274, 1274, 1274, 1277,
      826, 1275, 1275, 1275,  826, 1276, 1276, 1276,  826, 1200,
     1200, 1200,  826, 1277, 1277, 1277, 1277,  826, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,  826, 1277,
     1277, 1277, 1277, 1277,  826, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,  826, 1277,

     1277, 1277, 1277,  826, 1277, 1277, 1277,  826, 1277, 1277,
     1277,  826,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  364,  364,  364, 1277,  364,  364, 1277,  364, 1277,
      364,  364,  364,  364, 1277,  364,  364,  364,  364,  364,
      364,  364,  365,  365,  365, 1277,  365,  365,  365,  365,
     1277,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  368,  368,  368, 1277,  368,  368, 1277,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368, 1277,  368,  372,  372,  372, 1277,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  373,  373,  373, 1277,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  377,  377,  377, 1277,
     1277, 1277, 1277,  377, 1277, 1277, 1277, 1277,  377, 1277,
     1277, 1277,  377,  381,  381,  381, 1277, 1277,  381, 1277,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381, 1277,  381,  385,  385,  385, 1277,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  386,  386,  386, 1277,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  393, 1277, 1277, 1277,

     1277, 1277, 1277,  393, 1277, 1277, 1277, 1277,  393, 1277,
     1277, 1277,  393,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394, 1277,  394,  404,  404, 1277, 1277, 1277, 1277,
     1277,  404, 1277, 1277, 1277, 1277,  404, 1277, 1277, 1277,
      404,  404,  414, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277,  414, 1277,  414, 1277, 1277, 1277,  414,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      427, 1277,  427, 1277,  427,  427,  427,  427,  427,  427,

      427, 1277,  427, 1277,  427,  427,  427, 1277,  427,  443,
      443,  443, 1277,  443,  443,  443,  443,  443,  443,  443,
     1277,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      447,  447,  447, 1277,  447,  447,  447,  447,  447,  447,
      447, 1277,  447,  447,  447,  447,  447,  447, 1277,  447,
      447,  456,  456,  456, 1277,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456, 1277,  456,
     1277,  456,  457,  457,  457, 1277,  457,  457,  457,  457,
      457,  457,  457,  457,  457, 1277,  457,  457,  457, 1277,
      457, 1277,  457,  458, 1277,  458, 1277,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
     1277,  458, 1277,  458,  464, 1277,  464, 1277,  464,  464,
      464,  464,  464,  464,  464, 1277,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  469, 1277,  469, 1277,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  482,  482,  482, 1277,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  486,  486,  486,
     1277,  486,  486,  486,  486, 1277,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  491,  491,

      491, 1277,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
     1277, 1277,  492, 1277,  492, 1277,  492,  492, 1277,  492,
     1277,  492, 1277, 1277, 1277,  492,  493,  493,  493, 1277,
      493, 1277,  493,  493,  493,  493,  493, 1277,  493, 1277,
      493,  493,  493, 1277,  493, 1277,  493,  501, 1277, 1277,
      501,  501,  501, 1277, 1277,  501, 1277,  501,  501,  516,
      516,  516, 1277,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      518,  518,  518, 1277,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  364,  364,  364, 1277,  364,  364, 1277,  364, 1277,
      364,  364,  364,  364, 1277,  364,  364,  364,  364,  364,
      364,  364,  526,  526,  526, 1277,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526, 1277,  526,  528,  528,  528, 1277,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  368,  368,  368, 1277,  368,  368,
     1277,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368, 1277,  368,  531,  531,  531, 1277,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  534,  534,  534, 1277,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  539,  539,  539,
     1277,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  377,  377,
      377, 1277, 1277, 1277, 1277,  377, 1277, 1277, 1277, 1277,
      377, 1277, 1277, 1277,  377,  381,  381,  381, 1277, 1277,
      381, 1277,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381, 1277,  381,  386,  386,  386, 1277,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  393, 1277, 1277,
     1277, 1277, 1277, 1277,  393, 1277, 1277, 1277, 1277,  393,
     1277, 1277, 1277,  393,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394, 1277,  394,  404,  404, 1277, 1277, 1277,
     1277, 1277,  404, 1277, 1277, 1277, 1277,  404, 1277, 1277,
     1277,  404,  404,  414, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277,  414, 1277,  414, 1277, 1277, 1277,  414,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  427, 1277,  427, 1277,  427,  427,  427,  427,  427,
      427,  427, 1277,  427, 1277,  427,  427,  427, 1277,  427,
      443,  443,  443, 1277,  443,  443,  443,  443,  443,  443,
      443, 1277,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  447,  447,  447, 1277,  447,  447,  447,  447,  447,
      447,  447, 1277,  447,  447,  447,  447,  447,  447, 1277,
      447,  447,  456,  456,  456, 1277,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456, 1277,
      456, 1277,  456,  457,  457,  457, 1277,  457,  457,  457,

      457,  457,  457,  457,  457,  457, 1277,  457,  457,  457,
     1277,  457, 1277,  457,  458, 1277,  458, 1277,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458, 1277,  458, 1277,  458,  464, 1277,  464, 1277,  464,
      464,  464,  464,  464,  464,  464, 1277,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  469, 1277,  469, 1277,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  607,  607,  607,
     1277,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607, 1277,  607,  609,  609,

      609, 1277,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  492,
     1277, 1277,  492, 1277,  492, 1277,  492,  492, 1277,  492,
     1277,  492, 1277, 1277, 1277,  492,  493,  493,  493, 1277,
      493, 1277,  493,  493,  493,  493,  493, 1277,  493, 1277,
      493,  493,  493, 1277,  493, 1277,  493,  619,  619,  619,
     1277,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  516,  516,
      516, 1277,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  518,

      518,  518, 1277,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      638,  638,  638, 1277,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638, 1277,
      638,  364,  364,  364, 1277,  364,  364, 1277,  364, 1277,
      364,  364,  364,  364, 1277,  364,  364,  364,  364,  364,
      364,  364,  531,  531,  531, 1277,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  532,  532,  532, 1277,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  534,  534,  534, 1277,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  535,  535,  535, 1277,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  368,  368,  368, 1277,
      368,  368, 1277,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368, 1277,  368,  377,  377,  377,
     1277, 1277, 1277, 1277,  377, 1277, 1277, 1277, 1277,  377,
     1277, 1277, 1277,  377,  381,  381,  381, 1277, 1277,  381,
     1277,  381,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  381, 1277,  381,  386,  386,  386, 1277,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394, 1277,  394,  682,  682,  682,
     1277,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682, 1277,  682,  686,  686,
      686, 1277,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  710,
      710,  710, 1277,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  710, 1277,  710,
      748,  748,  748, 1277,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748, 1277,
      748,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  862, 1277, 1277, 1277,  862, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277,  862, 1277, 1277,  862,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908, 1277,  908,  908,  908, 1277,
      908,  908,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917, 1277,  917,  917,  917,
     1277,  917,  917,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928, 1277,  928,  928,
      928, 1277,  928,  928,   73, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277
    } ;

static yyconst flex_int16_t yy_chk[6234] =
    {   0,
        0,    1,  159,    1,    1,    2,    0,    2,    2,    0,
        3,  159,    3,    3,   78,   87,   95,    1,   78,   87,
       95,    2,  153,  109,  121,    1,    3,  109,  121,    2,
      154,  128,  138,  165,    3,  128,  138,  141,  141,  101,
      153,    0,  100,  169,  100,  101,  101,  112,  154,  112,
      140,  140,  140,  169,  149,  165,  351,    1,  149,  140,
      178,    2,  166,  166,  351,  178,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9, 1200,    9,    9,  164,    9,  188,  188, 1182,
        9,   10,  155,   10,   10,  164,   10,    9,  174,  164,
       10,   11,  158,   11,   11,    9,   11,   10,  235,  235,
      155,   12,  174,   12,   12,   10,   12,   11,  184,  199,
      158,  156,  184,  157,  199,   11,  416,   12,  156,  194,
       11,  416,  156,  194,  203,   12,  237,    9,  203,  156,

       12,  157,  157,  240,  211,  221,  229,   10,  211,  221,
      229,  234,  237,  981,  241,  234,  243,   11,  241,  240,
      243,  250,  266,  266,  243,  250,  243,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,  347,   15,   15,
       16,   15,   16,   16,  256,   16,  347,   29,  256,   29,

       29,  263,   15,  168,  168,  263,   16,  142,  142,  142,
       15,  555,  168,   29,   16,   15,  142,  242,  244,   16,
       17,   29,   17,   17,   18,   17,   18,   18,  273,   18,
      555,  168,  273,  242,  244,  284,   17,  302,  302,  284,
       18,  242,   15,   17,   17,  292,   16,   18,   18,  292,
      300,  312,  320,   29,  300,  312,  320,  142,  328,  336,
      338,  361,  328,  336,  338,  366,  366,  419,  391,  361,
      338,  494,  462,  425,  462,  419,   17,  391,  425,  494,
       18,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   21,
      386,   21,   21,   22,  353,   22,   22,  353,  363,  369,
      370,  363,  397,  353,  396,   21,  369,  363,  386,   22,
      393,  370,  374,   21,  396,  406,  397,   22,   21,  393,
      374,  374,   22,  369,  370,  406,  548,  353,  375,  375,
      375,  363,  377,  377,  377,  388,  353,  375,  412,  429,
      363,  377,  388,  429,  548,   21,  487,  487,  972,   22,

       23,   23,  412,  388,  963,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   30,   30,   30,   30,  962,   31,   30,
       31,   31,   32,  456,   32,   32,  401,  401,   33,   30,
       33,   33,  502,   34,   31,   34,   34,   30,   32,  456,
      961,  502,   31,  401,   33,  389,   32,  414,   37,   34,
       37,   37,   33,  380,  380,  380,  389,   34,  420,  495,
       37,  414,  380,  389,   37,  576,  404,  404,  465,   30,

      420,  495,   37,  465,   31,  404,  503,  503,   32,   38,
      576,   38,   38,   43,   33,   43,   43,  531,  529,   34,
       35,   38,   35,   35,  404,   38,  529,  529,  533,   43,
      380,  454,   35,   38,   37,  547,   35,   43,   43,  533,
      549,  531,   43,  534,   35,   35,  547,  541,   47,   35,
       47,   47,  533,  547,  454,  541,  541,   44,  549,   44,
       44,  536,  568,  641,   47,   38,  952,  534,   48,   43,
       48,   48,   47,   44,  551,   35,   35,   36,  454,   36,
       36,   44,   44,  568,   48,  536,   44,  641,  551,   36,
      635,  575,   48,   36,  542,  542,  542,  554,  554,  554,

      575,   36,   36,  542,   47,  594,   36,  598,  568,  610,
      619,  619,  598,   44,  754,  754,  624,  610,  610,  624,
      634,  594,  640,  634,   48,  624,  810,  810,  635,  634,
      640,  640,   36,   36,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   41,  653,   41,   41,  951,  950,   45,  949,

       45,   45,  653,   46,   41,   46,   46,  648,   41,  699,
       45,  543,  543,  543,   45,   46,   41,   41,  699,   46,
      543,   41,   45,  821,  644,  648,   55,   46,   55,   55,
      948,   55,  644,  644,  621,  621,  621,  645,  645,  645,
      767,  654,   55,  696,  767,  543,  645,   41,   41,   42,
       55,   42,   42,  621,   45,   55,  654,  706,  761,   46,
      767,   42,  666,  666,  666,   42,  821,  675,  675,  719,
      719,  719,  675,   42,   42,  675,  675,  947,   42,  684,
      675,  696,   55,  937,  675,  675,  621,  684,  684,  709,
      936,  935,  709,  751,  755,  706,  761,  934,  709,  728,

      728,  728,  751,  755,   42,   42,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   53,  714,  714,  714, 1297,  646,  646,  646,
     1297,  933,  714,  730,  730,  730,  646,   53,   53,  727,
      727,  727,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   56,  932,   56,   56,   57,   56,
       57,   57,  646,  715,  715,  715,  931,   57,  930,  798,
       56,  929,  715,   61,   57,   61,   61,   58,   56,   58,
       58,  727,   57,   56,  798,  764,   58,   57,  927,   61,

      746,  746,  746,   58,  764,  766,  923,   61,  772,  772,
      772,   58,   61,  916,  766,  715,   58,  772,  915,  914,
       56,  777,  777,  777,   57,  913,  912,  687,  687,  687,
      774,  774,  774,  786,  786,  786,  911,  687,  817,   61,
      788,  788,  788,   58,   59,   59,  687,  817,  910,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   62,  909,   62,   62,  805,  805,  805,   65,  687,
       65,   65,  774,   65,  688,  688,  688,   62,  907,  689,
      689,  689,  855,  906,   65,   62,  690,  690,  690,  905,

       62,  855,   65,  688,  752,  752,  752,   65,  689,  904,
      753,  753,  753,  889,  752,  690,   66,  902,   66,   66,
      753,   66,  889,  752,  756,  756,  756,   62,   63,  753,
       63,   63,   66,   63,   65,  898,  688,   63,   63,   63,
       66,  689,  888,  756,   63,   66,  816, 1298,  690,  816,
      887, 1298,   63,   63,  819,  816,  752,  886,  819,  757,
      757,  757,  753,  758,  758,  758,  773,  773,  773, 1299,
      773,  885,   66, 1299,  819,  773,  756,  884,  757,  808,
      808,  808,  758,  822,   63,   64,  822,   64,   64,  808,
       64,  883,  822, 1313,   64,   64,   64, 1313,  808,  882,

      881,   64,  880,  823,  823,  823,  838,  838,  838,   64,
       64,  757,  823, 1323,  879,  758,  877, 1323,  773,  864,
      864,  864,  868,  868,  868,  899,  899,  899,  864, 1324,
      876,  808, 1325, 1324,  899, 1327, 1325,  875,  874, 1327,
      873,   64,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       71, 1333,   71,   71,   71, 1333,  872, 1334,  924,  924,
      924, 1334,   71,  809,  809,  809,   71,  924,  812,  812,
      812,  871,  870,  809,   71,   71,  813,  813,  813,   71,
      869,  867,  809,  814,  814,  814,  866,  812,  824,  824,
      824,  863,  824,  856,  854,  813,  853,  824,  857,  857,
      857,  852,  814,  858,  858,  858,   71,   72,  857,   72,
       72,   72, 1337,  858, 1352,  809, 1337,  857, 1352,   72,
      812,  851,  858,   72,  944,  944,  944,  850,  813,  849,
     1362,   72,   72,  944, 1362,  814,   72,  958,  958,  958,
      824, 1363,  969,  969,  969, 1363,  958,  978,  978,  978,

      857,  969,  984,  984,  984,  858,  978,  848, 1364,  847,
      846,  984, 1364,   72,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,  213,  845,  844,  843,  213,  987,  987,  987,
      213,  213,  213, 1365,  842,  213,  987, 1365,  213,  213,
     1371, 1374, 1394,  213, 1371, 1374, 1394,  213,  213,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  367,  841,  859,
      859,  859,  367,  367,  367,  840,  839,  367,  837,  367,
      836,  835,  834,  833,  367,  367,  367,  371,  859,  860,
      860,  860,  371,  371,  371,  832,  831,  371,  830,  371,
      829,  861,  861,  861,  371,  371,  371,  384,  860,  990,

      990,  990,  384,  384,  384,  828,  827,  384,  990,  384,
      861,  859,  825,  815,  384,  384,  384,  390,  390,  993,
      993,  993,  390,  390,  390,  807,  806,  390,  993,  390,
      804,  860,  803,  802,  390,  390,  390,  398,  801,  398,
      800,  799,  797,  861,  398,  398,  398,  796,  795,  398,
      794,  398,  996,  996,  996,  793,  398,  398,  398,  431,
      792,  996,  791,  790,  431,  431,  431,  789,  785,  431,
      784,  431,  783,  782,  781,  780,  431,  431,  431,  432,
      432,  432,  432,  779,  432,  778,  776,  432,  432,  775,
      771,  770,  432,  999,  999,  999,  432,  432,  446,  769,

      768,  762,  999,  446,  446,  446,  760,  759,  446,  750,
      446,  749,  892,  892,  892,  446,  446,  446,  450,  926,
      926,  926,  892,  450,  450,  450,  748,  747,  450,  745,
      450,  892,  894,  894,  894,  450,  450,  450,  461,  895,
      895,  895,  461,  744,  896,  896,  896,  461,  461,  461,
      743,  894,  461,  742,  461,  741,  740,  739,  895,  461,
      461,  461,  468,  896,  892,  738,  737,  468,  468,  468,
      736,  926,  468,  735,  468,  734, 1002, 1002, 1002,  468,
      468,  468,  472,  733,  894, 1002,  732,  472,  472,  472,
      731,  895,  472,  729,  472,  726,  896,  725,  724,  472,

      472,  472,  496,  723, 1005, 1005, 1005,  496,  496,  496,
      722,  721,  496, 1005,  496,  720,  718,  717,  716,  496,
      496,  496,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  865,  865,
      865,  713,  865,  893,  893,  893,  711,  865,  900,  900,
      900,  710,  900,  893,  901,  901,  901,  900,  901,  918,
      918,  918,  893,  919,  919,  919,  920,  920,  920,  918,
      921,  921,  921,  919,  922,  922,  922,  707,  918,  925,
      925,  925,  919,  925,  704,  920,  703,  702,  925,  921,
      865,  701,  700,  922,  697,  893,  693,  938,  938,  938,

      900,  692,  939,  939,  939,  686,  901,  938,  940,  940,
      940,  918,  939,  685,  682,  919,  938,  681,  920,  679,
      678,  939,  921,  941,  941,  941,  922,  940,  942,  942,
      942,  925,  945,  945,  945,  676,  945,  946,  946,  946,
      674,  945,  941,  953,  953,  953,  673,  942,  672,  938,
      955,  955,  955,  953,  939,  954,  954,  954,  671,  670,
      940,  669,  953,  668,  667,  954,  956,  956,  956,  955,
      665,  957,  957,  957,  954,  941,  664,  959,  959,  959,
      942,  959,  663,  662,  945,  956,  959,  661,  660,  946,
      957,  960,  960,  960,  659,  953,  964,  964,  964,  971,

      971,  971,  955,  965,  965,  965,  964,  954,  966,  966,
      966,  658,  657,  965,  655,  964,  652,  649,  956,  967,
      967,  967,  965,  957,  970,  970,  970,  966,  970,  959,
      968,  968,  968,  970,  973,  973,  973,  638,  967,  637,
      974,  974,  974,  960,  973,  975,  975,  975,  964,  968,
      974,  971,  636,  973,  632,  965,  976,  976,  976,  974,
      966,  977,  977,  977,  975,  979,  979,  979,  631,  979,
      630,  967,  629,  628,  979,  976,  970,  980,  980,  980,
      977,  627,  968,  982,  982,  982,  973,  626,  983,  983,
      983,  623,  974,  982,  986,  986,  986,  975,  983,  989,

      989,  989,  982,  992,  992,  992,  622,  983,  976,  620,
      985,  985,  985,  977,  985,  617,  613,  979,  611,  985,
      609,  988,  988,  988,  607,  988,  995,  995,  995,  980,
      988,  605,  991,  991,  991,  982,  991,  998,  998,  998,
      983,  991,  602,  994,  994,  994,  986,  994, 1001, 1001,
     1001,  989,  994,  597,  596,  992,  997,  997,  997,  592,
      997,  591,  985,  589,  584,  997, 1000, 1000, 1000,  583,
     1000,  582,  581,  988,  580, 1000,  579,  578,  995, 1003,
     1003, 1003,  577, 1003,  991, 1004, 1004, 1004, 1003,  998,
     1006, 1006, 1006,  574, 1006,  994, 1007, 1007, 1007, 1006,

     1001, 1008, 1008, 1008,  573, 1009, 1009, 1009,  997, 1009,
     1008, 1010, 1010, 1010, 1009, 1011, 1011, 1011, 1000, 1012,
     1012, 1012,  572, 1012, 1011, 1013, 1013, 1013, 1012,  571,
      570, 1003, 1014, 1014, 1014,  569,  567, 1004, 1016, 1016,
     1016, 1014, 1006, 1015, 1015, 1015,  566, 1015, 1007, 1017,
     1017, 1017, 1015, 1019, 1019, 1019,  565, 1009, 1017,  563,
     1018, 1018, 1018, 1010, 1018, 1020, 1020, 1020,  560, 1018,
      558, 1012,  557,  553, 1020,  552,  544, 1013, 1021, 1021,
     1021,  540, 1021, 1022, 1022, 1022,  539, 1021,  528,  526,
     1016, 1023, 1023, 1023,  525, 1015,  524, 1024, 1024, 1024,

     1023, 1024, 1025, 1025, 1025, 1019, 1024, 1026, 1026, 1026,
      522,  521, 1018, 1027, 1027, 1027, 1026, 1027, 1028, 1028,
     1028,  520, 1027, 1029, 1029, 1029,  517, 1030, 1030, 1030,
     1021, 1030, 1029,  515,  514, 1022, 1030, 1031, 1031, 1031,
      513, 1032, 1032, 1032, 1033, 1033, 1033,  512, 1033, 1024,
     1032,  511,  510, 1033, 1025, 1034, 1034, 1034, 1035, 1035,
     1035,  508, 1036, 1036, 1036, 1027, 1036, 1035,  507,  506,
     1028, 1036, 1037, 1037, 1037, 1038, 1038, 1038,  505, 1030,
      504, 1039, 1039, 1039, 1038, 1039, 1040, 1040, 1040, 1031,
     1039, 1041, 1041, 1041,  499,  498, 1033, 1042, 1042, 1042,

     1041, 1042, 1043, 1043, 1043,  497, 1042, 1034, 1044, 1044,
     1044, 1045, 1045, 1045, 1036, 1045,  490, 1044,  489,  488,
     1045, 1046, 1046, 1046, 1037, 1047, 1047, 1047, 1048, 1048,
     1048,  486, 1048, 1039, 1047,  485,  481, 1048, 1040, 1049,
     1049, 1049, 1050, 1050, 1050,  480, 1051, 1051, 1051, 1042,
     1051, 1050,  476,  475, 1043, 1051, 1052, 1052, 1052, 1053,
     1053, 1053,  471, 1045,  470, 1054, 1054, 1054, 1053, 1054,
     1055, 1055, 1055, 1046, 1054, 1056, 1056, 1056,  467,  466,
     1048, 1057, 1057, 1057, 1056, 1057, 1058, 1058, 1058,  463,
     1057, 1049, 1059, 1059, 1059, 1060, 1060, 1060, 1051, 1060,

      460, 1059,  459,  455, 1060, 1061, 1061, 1061, 1052, 1062,
     1062, 1062, 1063, 1063, 1063,  453, 1063, 1054, 1062,  452,
      449, 1063, 1055, 1064, 1064, 1064, 1065, 1065, 1065,  445,
     1066, 1066, 1066, 1057, 1066, 1065,  442,  441, 1058, 1066,
     1067, 1067, 1067, 1068, 1068, 1068,  440, 1060,  439, 1069,
     1069, 1069, 1068, 1069, 1070, 1070, 1070, 1061, 1069, 1071,
     1071, 1071,  438,  437, 1063, 1072, 1072, 1072, 1071, 1072,
     1073, 1073, 1073,  436, 1072, 1064, 1074, 1074, 1074, 1075,
     1075, 1075, 1066, 1075,  435, 1074,  434,  433, 1075, 1076,
     1076, 1076, 1067, 1077, 1077, 1077, 1078, 1078, 1078,  430,

     1078, 1069, 1077,  423,  418, 1078, 1070, 1079, 1079, 1079,
     1080, 1080, 1080,  417, 1081, 1081, 1081, 1072, 1081, 1080,
      413,  411, 1073, 1081, 1082, 1082, 1082, 1083, 1083, 1083,
      410, 1075,  409, 1084, 1084, 1084, 1083, 1084, 1085, 1085,
     1085, 1076, 1084, 1086, 1086, 1086,  408,  407, 1078, 1087,
     1087, 1087, 1086, 1087, 1088, 1088, 1088,  405, 1087, 1079,
     1089, 1089, 1089, 1090, 1090, 1090, 1081, 1090,  400, 1089,
      394,  383, 1090, 1091, 1091, 1091, 1082, 1092, 1092, 1092,
     1093, 1093, 1093,  382, 1093, 1084, 1092,  379,  373, 1093,
     1085, 1094, 1094, 1094, 1095, 1095, 1095,  365, 1096, 1096,

     1096, 1087, 1096, 1095,  362,  359, 1088, 1096, 1097, 1097,
     1097, 1098, 1098, 1098,  358, 1090,  357, 1099, 1099, 1099,
     1098, 1099, 1100, 1100, 1100, 1091, 1099, 1101, 1101, 1101,
      356,  355, 1093, 1102, 1102, 1102, 1101, 1102, 1103, 1103,
     1103,  354, 1102, 1094, 1104, 1104, 1104, 1105, 1105, 1105,
     1096, 1105,  352, 1104,  350,  349, 1105, 1106, 1106, 1106,
     1097, 1107, 1107, 1107, 1108, 1108, 1108,  341, 1108, 1099,
     1107,  340,  337, 1108, 1100, 1109, 1109, 1109, 1110, 1110,
     1110,  329, 1111, 1111, 1111, 1102, 1111, 1110,  321,  313,
     1103, 1111, 1112, 1112, 1112, 1113, 1113, 1113,  309, 1105,

      301, 1114, 1114, 1114, 1113, 1114, 1115, 1115, 1115, 1106,
     1114, 1116, 1116, 1116,  293,  285, 1108, 1117, 1117, 1117,
     1116, 1117, 1118, 1118, 1118,  276, 1117, 1109, 1119, 1119,
     1119, 1120, 1120, 1120, 1111, 1120,  274, 1119,  267,  264,
     1120, 1121, 1121, 1121, 1112, 1122, 1122, 1122, 1123, 1123,
     1123,  257, 1123, 1114, 1122,  251,  249, 1123, 1115, 1124,
     1124, 1124, 1125, 1125, 1125,  236, 1126, 1126, 1126, 1117,
     1126, 1125,  233,  230, 1118, 1126, 1127, 1127, 1127, 1128,
     1128, 1128,  228, 1120,  222, 1129, 1129, 1129, 1128, 1129,
     1130, 1130, 1130, 1121, 1129, 1131, 1131, 1131,  220,  214,

     1123, 1132, 1132, 1132, 1131, 1132, 1133, 1133, 1133,  212,
     1132, 1124, 1134, 1134, 1134, 1135, 1135, 1135, 1126, 1135,
      210, 1134,  204,  195, 1135, 1136, 1136, 1136, 1127, 1137,
     1137, 1137, 1138, 1138, 1138,  185, 1138, 1129, 1137,  182,
      175, 1138, 1130, 1139, 1139, 1139, 1140, 1140, 1140,  173,
     1141, 1141, 1141, 1132, 1141, 1140,  172,  171, 1133, 1141,
     1142, 1142, 1142, 1143, 1143, 1143,  170, 1135,  167, 1144,
     1144, 1144, 1143, 1144, 1145, 1145, 1145, 1136, 1144, 1146,
     1146, 1146,  163,  161, 1138, 1147, 1147, 1147, 1146, 1147,
     1148, 1148, 1148,  160, 1147, 1139, 1149, 1149, 1149, 1150,

     1150, 1150, 1141, 1150,  150, 1149,  139,  137, 1150, 1151,
     1151, 1151, 1142, 1152, 1152, 1152, 1153, 1153, 1153,  129,
     1153, 1144, 1152,  122,  120, 1153, 1145, 1154, 1154, 1154,
     1155, 1155, 1155,  113, 1156, 1156, 1156, 1147, 1156, 1155,
      110,  103, 1148, 1156, 1157, 1157, 1157, 1158, 1158, 1158,
      102, 1150,   99, 1159, 1159, 1159, 1158, 1159, 1160, 1160,
     1160, 1151, 1159, 1161, 1161, 1161,   98,   96, 1153, 1162,
     1162, 1162, 1161, 1162, 1163, 1163, 1163,   88, 1162, 1154,
     1164, 1164, 1164, 1165, 1165, 1165, 1156, 1165,   79, 1164,
       73,    0, 1165, 1166, 1166, 1166, 1157, 1167, 1167, 1167,

     1168, 1168, 1168,    0, 1168, 1159, 1167,    0,    0, 1168,
     1160, 1169, 1169, 1169, 1170, 1170, 1170,    0, 1171, 1171,
     1171, 1162, 1171, 1170,    0,    0, 1163, 1171, 1172, 1172,
     1172, 1173, 1173, 1173,    0, 1165,    0, 1174, 1174, 1174,
     1173, 1174, 1175, 1175, 1175, 1166, 1174, 1176, 1176, 1176,
        0,    0, 1168, 1177, 1177, 1177, 1176, 1177, 1178, 1178,
     1178,    0, 1177, 1169, 1179, 1179, 1179, 1180, 1180, 1180,
     1171, 1180,    0, 1179,    0,    0, 1180, 1181, 1181, 1181,
     1172, 1183, 1183, 1183,    0, 1183, 1184, 1184, 1184, 1174,
     1183, 1185, 1185, 1185, 1175, 1185, 1186, 1186, 1186,    0,

     1185,    0, 1187, 1187, 1187, 1177, 1187, 1188, 1188, 1188,
     1178, 1187, 1189, 1189, 1189,    0, 1189,    0,    0, 1180,
        0, 1189, 1190, 1190, 1190,    0, 1191, 1191, 1191, 1181,
     1191,    0,    0, 1183,    0, 1191,    0,    0, 1184, 1192,
     1192, 1192,    0, 1185, 1194, 1194, 1194,    0, 1186, 1193,
     1193, 1193,    0, 1193, 1187, 1195, 1195, 1195, 1193, 1188,
     1196, 1196, 1196,    0, 1189, 1197, 1197, 1197, 1198, 1198,
     1198, 1199, 1199, 1199, 1190, 1201, 1201, 1201, 1191, 1202,
     1202, 1202, 1203, 1203, 1203, 1204, 1204, 1204, 1205, 1205,
     1205, 1192, 1206, 1206, 1206,    0, 1194, 1207, 1207, 1207,

        0, 1193, 1208, 1208, 1208,    0,    0, 1195, 1209, 1209,
     1209,    0, 1196, 1210, 1210, 1210,    0, 1197,    0,    0,
     1198,    0,    0, 1199, 1211, 1211, 1211, 1201, 1212, 1212,
     1212, 1202,    0,    0, 1203,    0,    0, 1204,    0,    0,
     1205, 1213, 1213, 1213, 1206, 1214, 1214, 1214,    0, 1207,
     1215, 1215, 1215,    0, 1208, 1216, 1216, 1216,    0,    0,
     1209, 1217, 1217, 1217,    0, 1210, 1218, 1218, 1218, 1219,
     1219, 1219, 1220, 1220, 1220,    0, 1211, 1221, 1221, 1221,
     1212, 1222, 1222, 1222, 1223, 1223, 1223, 1224, 1224, 1224,
     1225, 1225, 1225, 1213, 1226, 1226, 1226, 1214, 1227, 1227,

     1227,    0, 1215, 1228, 1228, 1228,    0, 1216, 1229, 1229,
     1229,    0,    0, 1217, 1230, 1230, 1230,    0, 1218,    0,
        0, 1219,    0,    0, 1220, 1231, 1231, 1231,    0, 1221,
     1232, 1232, 1232, 1222,    0,    0, 1223,    0,    0, 1224,
        0,    0, 1225, 1233, 1233, 1233, 1226, 1234, 1234, 1234,
     1227, 1235, 1235, 1235,    0, 1228, 1236, 1236, 1236,    0,
     1229, 1237, 1237, 1237,    0,    0, 1230, 1238, 1238, 1238,
     1239, 1239, 1239, 1240, 1240, 1240,    0, 1231, 1241, 1241,
     1241,    0, 1232, 1242, 1242, 1242, 1243, 1243, 1243, 1244,
     1244, 1244, 1245, 1245, 1245, 1233, 1246, 1246, 1246, 1234,

     1247, 1247, 1247, 1235, 1248, 1248, 1248,    0, 1236, 1249,
     1249, 1249,    0, 1237, 1250, 1250, 1250,    0,    0, 1238,
        0,    0, 1239,    0,    0, 1240, 1251, 1251, 1251,    0,
     1241, 1252, 1252, 1252,    0, 1242,    0,    0, 1243,    0,
        0, 1244,    0,    0, 1245, 1253, 1253, 1253, 1246, 1254,
     1254, 1254, 1247, 1255, 1255, 1255, 1248, 1256, 1256, 1256,
        0, 1249, 1257, 1257, 1257,    0, 1250, 1258, 1258, 1258,
     1259, 1259, 1259, 1260, 1260, 1260,    0,    0, 1251, 1261,
     1261, 1261,    0, 1252, 1262, 1262, 1262, 1263, 1263, 1263,
     1264, 1264, 1264, 1265, 1265, 1265,    0, 1253, 1266, 1266,

     1266, 1254, 1267, 1267, 1267, 1255, 1268, 1268, 1268, 1256,
     1269, 1269, 1269,    0, 1257, 1270, 1270, 1270,    0, 1258,
        0,    0, 1259,    0,    0, 1260, 1271, 1271, 1271,    0,
        0, 1261, 1272, 1272, 1272,    0, 1262,    0,    0, 1263,
        0,    0, 1264,    0,    0, 1265, 1273, 1273, 1273,    0,
     1266, 1274, 1274, 1274, 1267, 1275, 1275, 1275, 1268, 1276,
     1276, 1276, 1269,    0,    0,    0,    0, 1270,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1271,    0,
        0,    0,    0,    0, 1272,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1273,    0,

        0,    0,    0, 1274,    0,    0,    0, 1275,    0,    0,
        0, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,

     1286, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,

     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1300, 1300, 1300,    0, 1300, 1300,    0, 1300,    0,
     1300, 1300, 1300, 1300,    0, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1301, 1301, 1301,    0, 1301, 1301, 1301, 1301,
        0, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1302, 1302, 1302,    0, 1302, 1302,    0,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302,    0, 1302, 1303, 1303, 1303,    0, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1304, 1304, 1304,    0, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,    0,
        0,    0,    0, 1305,    0,    0,    0,    0, 1305,    0,
        0,    0, 1305, 1306, 1306, 1306,    0,    0, 1306,    0,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306,    0, 1306, 1307, 1307, 1307,    0, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308,    0, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1309,    0,    0,    0,

        0,    0,    0, 1309,    0,    0,    0,    0, 1309,    0,
        0,    0, 1309, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310,    0, 1310, 1311, 1311,    0,    0,    0,    0,
        0, 1311,    0,    0,    0,    0, 1311,    0,    0,    0,
     1311, 1311, 1312,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1312,    0, 1312,    0,    0,    0, 1312, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1315,    0, 1315,    0, 1315, 1315, 1315, 1315, 1315, 1315,

     1315,    0, 1315,    0, 1315, 1315, 1315,    0, 1315, 1316,
     1316, 1316,    0, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
        0, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1317, 1317, 1317,    0, 1317, 1317, 1317, 1317, 1317, 1317,
     1317,    0, 1317, 1317, 1317, 1317, 1317, 1317,    0, 1317,
     1317, 1318, 1318, 1318,    0, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,    0, 1318,
        0, 1318, 1319, 1319, 1319,    0, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319,    0, 1319, 1319, 1319,    0,
     1319,    0, 1319, 1320,    0, 1320,    0, 1320, 1320, 1320,

     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
        0, 1320,    0, 1320, 1321,    0, 1321,    0, 1321, 1321,
     1321, 1321, 1321, 1321, 1321,    0, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1322,    0, 1322,    0, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1326, 1326, 1326,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1328, 1328, 1328,
        0, 1328, 1328, 1328, 1328,    0, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329,

     1329,    0, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330,
        0,    0, 1330,    0, 1330,    0, 1330, 1330,    0, 1330,
        0, 1330,    0,    0,    0, 1330, 1331, 1331, 1331,    0,
     1331,    0, 1331, 1331, 1331, 1331, 1331,    0, 1331,    0,
     1331, 1331, 1331,    0, 1331,    0, 1331, 1332,    0,    0,
     1332, 1332, 1332,    0,    0, 1332,    0, 1332, 1332, 1335,
     1335, 1335,    0, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1336, 1336, 1336,    0, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1338, 1338, 1338,    0, 1338, 1338,    0, 1338,    0,
     1338, 1338, 1338, 1338,    0, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1339, 1339, 1339,    0, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339,    0, 1339, 1340, 1340, 1340,    0, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1341,    0, 1341, 1341,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341,    0, 1341, 1342, 1342, 1342,    0, 1342,

     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343,    0,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344, 1344,
        0, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345,
     1345,    0,    0,    0,    0, 1345,    0,    0,    0,    0,
     1345,    0,    0,    0, 1345, 1346, 1346, 1346,    0,    0,
     1346,    0, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346,    0, 1346, 1347, 1347, 1347,    0,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1348,    0,    0,
        0,    0,    0,    0, 1348,    0,    0,    0,    0, 1348,
        0,    0,    0, 1348, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349,    0, 1349, 1350, 1350,    0,    0,    0,
        0,    0, 1350,    0,    0,    0,    0, 1350,    0,    0,
        0, 1350, 1350, 1351,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1351,    0, 1351,    0,    0,    0, 1351,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1354,    0, 1354,    0, 1354, 1354, 1354, 1354, 1354,
     1354, 1354,    0, 1354,    0, 1354, 1354, 1354,    0, 1354,
     1355, 1355, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355,
     1355,    0, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1356, 1356, 1356,    0, 1356, 1356, 1356, 1356, 1356,
     1356, 1356,    0, 1356, 1356, 1356, 1356, 1356, 1356,    0,
     1356, 1356, 1357, 1357, 1357,    0, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,    0,
     1357,    0, 1357, 1358, 1358, 1358,    0, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358,    0, 1358, 1358, 1358,
        0, 1358,    0, 1358, 1359,    0, 1359,    0, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359,    0, 1359,    0, 1359, 1360,    0, 1360,    0, 1360,
     1360, 1360, 1360, 1360, 1360, 1360,    0, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1361,    0, 1361,    0,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1366, 1366, 1366,
        0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366,    0, 1366, 1367, 1367,

     1367,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368,
        0,    0, 1368,    0, 1368,    0, 1368, 1368,    0, 1368,
        0, 1368,    0,    0,    0, 1368, 1369, 1369, 1369,    0,
     1369,    0, 1369, 1369, 1369, 1369, 1369,    0, 1369,    0,
     1369, 1369, 1369,    0, 1369,    0, 1369, 1370, 1370, 1370,
        0, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1372, 1372,
     1372,    0, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1373,

     1373, 1373,    0, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1375, 1375, 1375,    0, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,    0,
     1375, 1376, 1376, 1376,    0, 1376, 1376,    0, 1376,    0,
     1376, 1376, 1376, 1376,    0, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1377, 1377, 1377,    0, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1378, 1378, 1378,    0, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,

     1378, 1378, 1378, 1378, 1379, 1379, 1379,    0, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380,    0, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,    0,
     1381, 1381,    0, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381,    0, 1381, 1382, 1382, 1382,
        0,    0,    0,    0, 1382,    0,    0,    0,    0, 1382,
        0,    0,    0, 1382, 1383, 1383, 1383,    0,    0, 1383,
        0, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383,    0, 1383, 1384, 1384, 1384,    0, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385,    0, 1385, 1386, 1386, 1386,
        0, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386,    0, 1386, 1387, 1387,
     1387,    0, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1388,
     1388, 1388,    0, 1388, 1388, 1388, 1388, 1388, 1388, 1388,

     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,    0, 1388,
     1389, 1389, 1389,    0, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,    0,
     1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1392,    0,    0,    0, 1392,    0,    0,
        0,    0,    0,    0,    0,    0, 1392,    0,    0, 1392,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395,    0, 1395, 1395, 1395,    0,
     1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396,    0, 1396, 1396, 1396,
        0, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397,    0, 1397, 1397,
     1397,    0, 1397, 1397, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "memberdef.h"
#include "membername.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NEVER_INTERACTIVE 1

struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(int size) : fileBuf(size), 
                        oldFileBuf(0), oldFileBufPos(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      Define *d = m_contextDefines.find(name);
      if (d && d->undef) d=0;
      //printf("isDefined(%s)=%p\n",name,d);
      return d;
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static int                g_yyMLines   = 1;
static int                g_yyColNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<CondCtx>    g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;
static int                g_fenceSize = 0;
static bool               g_ccomment;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=fi.absFilePath().utf8();
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList("EXCLUDE_PATTERNS");
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = fi.absFilePath().utf8();

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr-g_yyMLines;
  def->columnNr   = g_yyColNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr-g_yyMLines,g_yyColNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberType_Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList("INCLUDE_PATH");
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      DBG_CTX((stderr,"Switching to include file %s\n",incFileName.data()));
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",incFileName.data());
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",incFileName.data());
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_yyFileName,g_yyLineNr,sectId);
  g_condStack.push(new CondCtx(g_yyLineNr,sectId,g_skip));
  if (!expResult)
  {
    g_skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,g_skip);
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */




































#line 4196 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define ArgCopyCComment 18
#define CopyCComment 19
#define SkipVerbatim 20
#define SkipCPPComment 21
#define RemoveCComment 22
#define RemoveCPPComment 23
#define Guard 24
#define DefinedExpr1 25
#define DefinedExpr2 26
#define SkipDoubleQuote 27
#define SkipSingleQuote 28
#define UndefName 29
#define IgnoreLine 30
#define FindDefineArgs 31
#define ReadString 32
#define CondLineC 33
#define CondLineCpp 34
#define SkipCond 35

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

yy_size_t preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1751 "pre.l"


#line 4419 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1278 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6175 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1753 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1754 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1755 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1756 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1759 "pre.l"
{ BEGIN(Command); g_yyColNr+=preYYleng; g_yyMLines=0;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1760 "pre.l"
{
 					  outputArray(preYYtext,(int)preYYleng);
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1764 "pre.l"
{ // constructors?
					  int i;
					  for (i=(int)preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1773 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1773 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=(int)preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1803 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1808 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1815 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1822 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1825 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1828 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1831 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1835 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1838 "pre.l"
{
					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1841 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1845 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1882 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1900 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1902 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1905 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
					  g_yyColNr=1;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1911 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1915 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1940 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1943 "pre.l"
{
                                          g_defArgsStr+=preYYtext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1947 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 1951 "pre.l"
{
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1956 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1959 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1962 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1965 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 1969 "pre.l"
{ 
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1974 "pre.l"
{ 
                                          g_defArgsStr+=preYYtext;
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1977 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1981 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1984 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1987 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1990 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1995 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 2002 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
					  g_yyColNr+=preYYleng;
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2007 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2012 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2018 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2023 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2028 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2033 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2045 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 2058 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2061 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2068 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 2072 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 2077 "pre.l"
{
                                          g_expectGuard = FALSE;
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 2080 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 2083 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 2087 "pre.l"

	YY_BREAK
case 59:
YY_RULE_SETUP
#line 2088 "pre.l"
{g_yyColNr+=preYYleng;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 2089 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 2101 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2106 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 63:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2109 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 2112 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 2113 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 2114 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 2131 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 2132 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 2140 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 2147 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 2152 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 2155 "pre.l"

	YY_BREAK
case 73:
YY_RULE_SETUP
#line 2156 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2157 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 2158 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 2159 "pre.l"

	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2160 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2165 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 79:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2174 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 2189 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 2198 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 2203 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 2206 "pre.l"

	YY_BREAK
case 84:
YY_RULE_SETUP
#line 2207 "pre.l"

	YY_BREAK
case 85:
YY_RULE_SETUP
#line 2208 "pre.l"
{ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 2209 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 2212 "pre.l"

	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2213 "pre.l"
{ 
                                        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2215 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2219 "pre.l"
{ 
                                        }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2221 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 2225 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2230 "pre.l"
{ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 2231 "pre.l"
{ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 2232 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 2235 "pre.l"
{ }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2236 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 2243 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 2248 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2260 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 2263 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 2267 "pre.l"
{
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 2269 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2282 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 2312 "pre.l"
{ // empty define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2340 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 2355 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2359 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2360 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2361 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2369 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2375 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 113:
YY_RULE_SETUP
#line 2400 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 2407 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2413 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2427 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2430 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2434 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2437 "pre.l"
{
                                          static bool markdownSupport = Config_getBool("MARKDOWN_SUPPORT");
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 2450 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 2454 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
                                          g_fenceSize=0;
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
                                            QCString bn=&preYYtext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
					    g_blockName=bn.stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2471 "pre.l"
{ // escaped @cond
  					  outputArray(preYYtext,(int)preYYleng);
                                        }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2474 "pre.l"
{ // conditional section
                                          g_ccomment=TRUE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineCpp);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2479 "pre.l"
{ // conditional section
                                          g_ccomment=FALSE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineC);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2484 "pre.l"
{
  				          startCondSection(preYYtext);
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
  					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2505 "pre.l"
{ // non-guard character
  					  unput(*preYYtext);
  					  startCondSection(" ");
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2527 "pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            g_ccomment=TRUE;
                                            // end C comment
  					    outputArray("*/",2);
                                          }
                                          else
                                          {
                                            g_ccomment=FALSE;
                                          }
                                          g_condCtx=YY_START;
                                          startCondSection(" ");
                                          BEGIN(SkipCond);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 2542 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2543 "pre.l"
{ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2544 "pre.l"
{ }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2545 "pre.l"
{ g_ccomment=FALSE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2546 "pre.l"
{ g_ccomment=TRUE; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2547 "pre.l"
{
                                          if (!g_skip)
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                          }
                                        }
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2553 "pre.l"
{ 
                                          bool oldSkip = g_skip;
                                          endCondSection(); 
                                          if (oldSkip && !g_skip)
                                          {
                                            if (g_ccomment)
                                            {
                                              outputArray("/** ",4);
                                            }
                                            BEGIN(g_condCtx);
                                          }
                                        }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2565 "pre.l"
{
                                          bool oldSkip = g_skip;
  					  endCondSection();
                                          if (oldSkip && !g_skip) 
                                          {
                                            BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2573 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,(int)preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2584 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2591 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2594 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 2597 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2601 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2604 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2608 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 2613 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2619 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2629 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2630 "pre.l"

	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2631 "pre.l"

	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2632 "pre.l"

	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 2633 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2634 "pre.l"

	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2635 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 2638 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2642 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2645 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2648 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2651 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2654 "pre.l"

	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2655 "pre.l"

	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2656 "pre.l"

	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2657 "pre.l"

	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2658 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2662 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2695 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 2699 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
					  g_defText += ' ';
					  g_yyLineNr++;
					  g_yyMLines++;
					}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 2706 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr-g_yyMLines;
					      def->columnNr = g_yyColNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_yyColNr=1;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2760 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2761 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2762 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2763 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2771 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2778 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2779 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2780 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2784 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2787 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2791 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2792 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2793 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
#line 2794 "pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    DBG_CTX((stderr,"Terminating scanner!\n"));
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    DBG_CTX((stderr,"######## FileName %s\n",g_yyFileName.data()));
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 180:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2826 "pre.l"
case 181:
YY_RULE_SETUP
#line 2826 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCContext=YY_START;
					    g_commentCount=1;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCComment);
                                          }
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2840 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCPPContext=YY_START;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCPPComment);
                                          }
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2853 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2857 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2862 "pre.l"
ECHO;
	YY_BREAK
#line 6540 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 58);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1278 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 58;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1278 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1277);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2862 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath().utf8());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_skip=FALSE;
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_yyColNr  = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",def->name.data());
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


