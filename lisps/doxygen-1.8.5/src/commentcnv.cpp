
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentcnvYY_create_buffer
#define yy_delete_buffer commentcnvYY_delete_buffer
#define yy_flex_debug commentcnvYY_flex_debug
#define yy_init_buffer commentcnvYY_init_buffer
#define yy_flush_buffer commentcnvYY_flush_buffer
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#define yyin commentcnvYYin
#define yyleng commentcnvYYleng
#define yylex commentcnvYYlex
#define yylineno commentcnvYYlineno
#define yyout commentcnvYYout
#define yyrestart commentcnvYYrestart
#define yytext commentcnvYYtext
#define yywrap commentcnvYYwrap
#define yyalloc commentcnvYYalloc
#define yyrealloc commentcnvYYrealloc
#define yyfree commentcnvYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(commentcnvYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentcnvYYleng;

extern FILE *commentcnvYYin, *commentcnvYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing commentcnvYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentcnvYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentcnvYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentcnvYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentcnvYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentcnvYYrestart (FILE *input_file  );
void commentcnvYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentcnvYY_create_buffer (FILE *file,int size  );
void commentcnvYY_delete_buffer (YY_BUFFER_STATE b  );
void commentcnvYY_flush_buffer (YY_BUFFER_STATE b  );
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentcnvYYpop_buffer_state (void );

static void commentcnvYYensure_buffer_stack (void );
static void commentcnvYY_load_buffer_state (void );
static void commentcnvYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentcnvYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentcnvYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentcnvYYalloc (yy_size_t  );
void *commentcnvYYrealloc (void *,yy_size_t  );
void commentcnvYYfree (void *  );

#define yy_new_buffer commentcnvYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentcnvYYin = (FILE *) 0, *commentcnvYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentcnvYYlineno;

int commentcnvYYlineno = 1;

extern char *commentcnvYYtext;
#define yytext_ptr commentcnvYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentcnvYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentcnvYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[309] =
    {   0,
        1,    1,   40,   40,   28,   28,   28,   28,   66,   66,
       81,   80,    1,   22,   80,    9,   80,   22,   80,    7,
       22,   80,   15,   22,   80,    8,   22,   80,    1,   22,
       80,   22,   80,   22,   80,   22,   80,   34,   80,   35,
       80,   33,   34,   80,   34,   80,   38,   80,   39,   80,
       37,   38,   80,   38,   80,   60,   80,   80,   80,   40,
       47,   80,   43,   80,   47,   80,   47,   80,   41,   47,
       80,   47,   80,   47,   80,   28,   31,   80,   29,   80,
       31,   80,   31,   80,   28,   31,   80,   31,   80,   31,
       80,   24,   31,   80,   25,   31,   80,   28,   31,   80,

       31,   80,   79,   80,   61,   80,   79,   80,   68,   80,
       65,   66,   68,   80,   65,   68,   80,   73,   78,   80,
       75,   80,   78,   80,   74,   78,   80,   76,   78,   80,
       77,   78,   80,   73,   78,   80,   73,   78,   80,    1,
        5,   17,   15,    1,    6,    1,   14,   32,   36,   40,
       45,   46,   45,   46,   46,   45,   41,   41,   44,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       28,   28,   28,   27,   61,   65,   66,   65,   73,   72,
       73,   73,   73,    3,    5,    4,    6,    1,   16,   14,
       13,16395,   52,   42,   62,   69,   70,   69,   69,   69,

       20,   20,   70,   69,   69,   69,   69,   69,   69,   69,
       23,   30,   27,   73,16455,    2,   13,   13,16395,   55,
    16438,16437,16442,16434,   48,   62,   62,   69,   69,   69,
       69,   69,   20,   69,   69,   69,   69,   69,   69, 8263,
       73, 8263,   13,16441,16440,16443,16435,   49, 8246, 8245,
     8250, 8242,   69,   69,   19,   19,   70,   69,   69,   69,
       69,   69,   69,   69, 8249, 8248, 8251, 8243,   63,   67,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   18,   26,   10,   69,
       69,   69,   69,   69,   69, 8203,   69,   64,   64,   70,

       69,   21,   21,   70,   69,   69,   12,   13
    } ;

static yyconst flex_int16_t yy_accept[373] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,    9,    9,   10,
       11,   11,   11,   12,   13,   16,   18,   20,   23,   26,
       29,   32,   34,   36,   38,   40,   42,   45,   47,   49,
       51,   54,   56,   58,   59,   60,   63,   65,   67,   69,
       72,   74,   76,   79,   81,   83,   85,   88,   90,   92,
       95,   98,  101,  103,  105,  107,  109,  111,  115,  118,
      121,  123,  125,  128,  131,  134,  137,  140,  141,  141,
      142,  143,  143,  144,  145,  146,  146,  146,  147,  147,
      148,  148,  149,  150,  150,  150,  150,  150,  150,  151,

      153,  155,  156,  157,  157,  158,  159,  160,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      171,  172,  172,  172,  172,  173,  173,  173,  173,  174,
      174,  175,  175,  176,  178,  179,  180,  181,  182,  183,
      184,  184,  186,  186,  186,  188,  189,  190,  191,  191,
      192,  192,  192,  193,  193,  194,  194,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  204,  205,  206,  207,
      208,  209,  210,  211,  211,  211,  211,  212,  213,  213,
      214,  216,  217,  217,  218,  218,  218,  219,  220,  221,
      221,  221,  222,  223,  224,  225,  226,  226,  227,  228,

      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  240,  240,  240,  240,  242,  243,  243,  243,
      243,  243,  244,  244,  244,  245,  246,  247,  248,  249,
      249,  249,  250,  250,  251,  251,  252,  252,  253,  254,
      255,  256,  258,  259,  260,  261,  262,  263,  264,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  266,  266,  267,  267,
      268,  268,  269,  270,  271,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  280,  281,

      282,  283,  284,  285,  286,  287,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  289,  290,  290,  290,  291,
      292,  293,  294,  295,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  297,  298,  299,  301,  302,  303,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      309,  309
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,   10,    9,
        9,   11,    1,    1,   12,    9,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,    1,   15,
        1,   16,    1,   17,   18,   18,   19,   20,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       21,   22,   23,    1,   18,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   30,   33,   34,   35,   36,
       37,   30,   30,   38,   39,   40,   41,   42,   30,   43,
       44,   30,   45,    9,   46,   47,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    1,    7,    6,
        8,    9,   10,   11,    1,    1,   12,   13,   13,   13,
        1,   14,    1,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   16,   17,   18
    } ;

static yyconst flex_int16_t yy_base[422] =
    {   0,
        0,    0,    0,   24,   11,   17,    6,   22, 1463,   38,
       42,   49,   55,   67,   73,   80,   39,   82,  126,    0,
       70,  172, 1465, 1467,    0, 1467,   93, 1458, 1456, 1467,
      216, 1450,   52, 1467, 1467, 1467, 1467,    0, 1467, 1467,
     1467,    0,    2,   36, 1448,    0,   55, 1467, 1454,   92,
      222, 1442,    0, 1467, 1467,   93,  104, 1445, 1429, 1467,
     1467,  174, 1443, 1452, 1467,    0, 1467, 1452,    0,    0,
     1467, 1440, 1467, 1467, 1467,  175, 1439,    0, 1448, 1467,
     1447, 1443, 1467,  264, 1467, 1445, 1444,  284, 1441,   13,
      177, 1467, 1467,  176, 1432,  179, 1431,  186,    0, 1467,

      193, 1467, 1467, 1437,  185,  190, 1467,    0, 1371,  165,
      167,   43,  260,  166,  162,  185,  168,   46,   79, 1372,
        0, 1264, 1157,  265,  212, 1126, 1122, 1097,  214, 1118,
      230, 1127, 1467, 1127,    0,    0, 1467,  232, 1115,  267,
     1124, 1467, 1121, 1122, 1467,  309, 1467, 1467, 1121, 1467,
     1045,  104,  272,  288, 1031, 1036,  279, 1467, 1040,  995,
     1467,  272,  258,  152, 1467,    0,  265,  175,  268,  257,
      278,  280,  275,  910,  920,  917, 1467, 1467,  911, 1467,
      313, 1467,  930,  324,  324,  926,  924,  325,  910,  916,
      326,  918,  917,  915,  909, 1467,  327,  908,  895,  304,

      306,  309,  359,  310,    0,  307,  328,  305,  308,  332,
      341,  869,  869,  353,  363,  372,    0,  390,  879,  376,
      887,  395,  880,  397,  875,  873,  871,  864, 1467,  398,
      862, 1467,  839, 1467,  837, 1467,  835, 1467,  412,  348,
     1467, 1467,  375,  382,  303,  364,  385,  378,  386,  806,
      794,  790,  805,  787,  753,  722,  711,  708,  705,  702,
      419,  422,  424,  727,  736, 1467,  586, 1467,  585, 1467,
      584, 1467,  431, 1467,  436,  391,  405,  406,  407,  409,
      411,  413,  415,  234,  549,  550,  544,  547,  553,  543,
      546,  552,  538,  551,    0,  426,  442,  426,  419,  427,

      429,  234,  418,   78,  424, 1467,  543,  541,  546,  536,
      535,  546,  533,  541, 1467, 1467,  463,    0,  433,  498,
      431,  439,  545,  442,  528,  527,  520,  523,  506,  517,
      504,  488, 1467,  443, 1467, 1467,  436, 1467, 1467,  503,
      502,  500,  502,  501,  494,  499,  482,  448,  498,  497,
      491,  482,  481,  492,  478,  483,  445,  451,  363,  313,
      308,  493,  189,  489,  480,  491,  494,   75,   72, 1467,
     1467,  592,  610,  628,  646,  664,  682,  700,  718,  736,
      754,  772,  790,  808,  826,  844,  862,  880,  898,  915,
      930,  948,  966,  984, 1002, 1020, 1026, 1034, 1050, 1068,

     1086, 1104, 1121,    6, 1136, 1154, 1172, 1190, 1208, 1226,
     1244, 1262, 1280, 1298, 1316, 1334, 1352, 1370, 1388, 1406,
     1424
    } ;

static yyconst flex_int16_t yy_def[422] =
    {   0,
      372,  372,  373,  373,  374,  374,  375,  375,  372,  372,
      376,  376,  377,  377,  377,  377,  378,  378,  371,   19,
      379,  379,  371,  371,  380,  371,  381,  371,  371,  371,
      382,  371,  371,  371,  371,  371,  371,  383,  371,  371,
      371,  384,  371,  371,  371,  385,  386,  371,  371,  387,
      371,  371,  388,  371,  371,  371,  388,  371,  371,  371,
      371,  388,  371,  389,  371,   51,  371,  390,  390,  391,
      371,  371,  371,  371,  371,  391,  391,  380,  381,  371,
      392,  371,  371,  382,  371,  393,  394,  395,  371,  371,
      396,  371,  371,  371,  371,  371,  371,  371,  385,  371,

      386,  371,  371,  371,  387,  387,  371,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  371,
      388,  371,  371,  371,  388,  371,  371,  371,  388,  371,
      371,  389,  371,  390,  390,  391,  371,  391,  391,  391,
      392,  371,  371,  393,  371,  395,  371,  371,  396,  371,
      399,  396,  400,  371,  401,  371,  402,  371,  403,  398,
      371,  398,  398,  398,  371,  404,  398,  398,  398,  398,
      398,  398,  398,  371,  371,  371,  371,  371,  371,  371,
      405,  371,  399,  371,  396,  406,  407,  400,  408,  371,
      409,  410,  411,  412,  413,  371,  371,  371,  403,  398,

      398,  398,  398,  398,  404,  398,  398,  398,  398,  398,
      398,  371,  371,  371,  371,  405,  414,  371,  371,  396,
      406,  371,  407,  371,  415,  416,  417,  418,  371,  371,
      410,  371,  411,  371,  412,  371,  413,  371,  398,  398,
      371,  371,  398,  398,  398,  398,  398,  398,  398,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  396,  371,  371,  415,  371,  416,  371,  417,  371,
      418,  371,  371,  371,  371,  398,  398,  398,  398,  398,
      398,  398,  398,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  419,  396,  371,  398,  398,  398,

      398,  398,  398,  398,  398,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  396,  420,  398,  398,
      398,  398,  398,  398,  371,  371,  371,  371,  371,  371,
      371,  396,  371,  398,  371,  371,  398,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  396,  398,  371,  371,
      371,  371,  371,  371,  371,  396,  398,  371,  371,  371,
      371,  396,  371,  396,  396,  396,  396,  421,  421,  371,
        0,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371
    } ;

static yyconst flex_int16_t yy_nxt[1515] =
    {   0,
      371,  371,   26,   94,   27,   28,   29,  371,   40,   30,
       31,   32,   33,   36,   95,   41,   37,  148,   31,   36,
      205,   34,   37,  148,   40,   31,   26,   42,   27,   28,
       29,   41,   38,   30,   31,   32,   33,   96,   38,   44,
       43,   65,   31,   42,   47,   34,   48,   49,   97,   31,
       45,   47,   50,   48,   49,   66,  101,   54,   51,   50,
       66,  102,   90,   51,   91,   51,  103,   55,   57,   54,
       51,   56,   71,  172,  370,   54,   56,  370,  164,   58,
       72,   62,   54,   56,   65,   55,   52,  161,   56,   59,
      161,   73,   63,   52,   59,   80,   59,   81,   66,   55,

       55,   59,  106,   66,  107,  125,  150,   81,   81,  324,
      185,   55,   55,  173,   74,   75,  126,   60,   61,  122,
      123,  124,  161,  161,   60,   61,   67,   68,   24,   67,
       69,   67,   67,   67,   69,   67,   67,   69,   67,   69,
       67,   67,   67,   69,   69,   69,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       67,   67,   67,   76,   71,  129,  138,   94,  204,  150,
       96,  151,   72,  152,   77,  168,  130,  139,   95,  153,
      155,   97,  156,   73,  101,  371,  161,  371,  157,  102,

      106,  162,  107,  163,  103,  167,  161,  171,  169,  161,
      161,  161,  161,  125,  207,  129,   74,   75,   85,  161,
       86,   87,   87,  170,  126,   87,  130,   87,   87,  161,
       88,   88,  177,  138,  180,  306,  306,   87,  108,  109,
      109,  109,  180,  108,  139,  109,  109,  110,  111,  112,
      113,  109,  114,  109,  109,  115,  116,  109,  109,  117,
      109,  109,  109,  118,  119,  109,   85,  165,   87,   87,
       87,  181,  177,   87,  187,   87,   87,  323,  161,  181,
      165,  196,  203,  202,  188,   87,  145,  177,  144,  144,
      144,  197,  189,  144,  190,  144,  144,  203,  200,  206,

      191,  161,  161,  208,  166,  144,  209,  201,  211,  161,
      177,  145,  161,  144,  144,  144,  161,  210,  144,  161,
      144,  144,  161,  217,  161,  218,  150,  187,  229,  196,
      144,  203,  239,  240,  217,  243,  219,  188,  230,  197,
      244,  246,  177,  220,  247,  279,  363,  161,  161,  161,
      161,  161,  161,  161,  161,  245,  248,  217,  217,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  161,  241,  241,  241,  161,  249,  150,  241,
      241,  241,  217,  252,  276,  161,  253,  254,  258,  259,
      255,  218,  161,  217,  256,  257,  263,  260,  263,  280,

      229,  282,  219,  242,  241,  241,  177,  264,  161,  264,
      230,  277,  262,  273,  274,  275,  217,  217,  278,  161,
      281,  283,  161,  295,  150,  263,  161,  298,  150,  161,
      161,  295,  273,  274,  275,  161,  264,  275,  274,  275,
      299,  300,  302,  301,  303,  320,  318,  296,  305,  161,
      161,  161,  304,  161,  318,  161,  161,  161,  319,  161,
      321,  323,  161,  161,  322,  150,  317,  323,  161,  334,
      161,  161,  337,  161,  323,  161,  323,  161,  348,  323,
      161,  357,  150,  161,  150,  150,  161,  161,  323,  161,
      150,  150,  161,  150,  177,  150,  150,  332,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  366,  335,  335,  335,  347,  364,  356,  335,  335,
      335,  177,  362,  361,  177,  177,  360,  367,  365,  368,
      359,  358,  355,  354,  353,  352,  351,  350,  349,  346,
      345,  344,  336,  335,  335,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  343,  338,
      338,  338,  342,  341,  340,  338,  338,  338,  315,  331,
      330,  329,  328,  327,  326,  325,  315,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  272,  270,  268,  339,
      338,  338,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   78,   78,  266,  297,
      294,  293,   78,   78,  292,  291,   78,   78,   78,  290,
       78,   78,   78,   78,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       92,   92,  289,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   93,   93,
      288,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   99,   99,  287,  286,
      285,   99,   99,  284,   99,   99,   99,  238,   99,  236,
       99,  234,   99,   99,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  105,  105,  232,  105,  272,  105,  105,  105,
      105,  105,  105,  270,  105,  268,  105,  266,  105,  105,
      121,  121,  224,  121,  121,  121,  121,  121,  121,  222,
      121,  261,  121,  251,  121,  250,  198,  121,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  198,
      132,  238,  132,  132,  132,  132,  135,  236,  135,  234,
      232,  135,  227,  135,  226,  135,  224,  135,  222,  135,
      136,  136,  184,  136,  136,  136,  136,  215,  136,  136,
      136,  136,  136,  214,  136,  213,  212,  136,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  159,  161,
      159,  198,  194,  159,  160,  193,  160,  184,  160,  160,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  199,  150,  145,  182,  142,  140,  134,  133,
      131,  199,  179,  199,  178,  199,  216,  216,  127,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      225,  225,  176,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  217,  217,

      175,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  174,  316,  316,

      316,  316,  316,  316,  316,  316,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  161,  333,  333,  333,  333,
      333,  333,  333,  333,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  158,   98,  154,  147,   85,  145,  143,  142,
       80,  140,  137,  134,  133,  131,  128,  127,  120,  104,
       98,   89,   83,   82,  371,   43,   23,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371
    } ;

static yyconst flex_int16_t yy_chk[1515] =
    {   0,
        0,    0,    3,   43,    3,    3,    3,    0,    7,    3,
        3,    3,    3,    5,   43,    7,    5,   90,    3,    6,
      404,    3,    6,   90,    8,    3,    4,    7,    4,    4,
        4,    8,    5,    4,    4,    4,    4,   44,    6,   10,
       10,   17,    4,    8,   11,    4,   11,   11,   44,    4,
       10,   12,   11,   12,   12,   17,   47,   13,   11,   12,
       17,   47,   33,   11,   33,   12,   47,   13,   14,   14,
       12,   13,   21,  118,  369,   15,   13,  368,  112,   14,
       21,   16,   16,   14,   18,   15,   11,  112,   14,   15,
      118,   21,   16,   12,   15,   27,   16,   27,   18,   13,

       13,   16,   50,   18,   50,   57,  152,   27,   27,  304,
      152,   14,   14,  119,   21,   21,   57,   15,   15,   56,
       56,   56,  304,  119,   16,   16,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   22,   22,   62,   76,   94,  164,   91,
       96,   91,   22,   91,   22,  115,   62,   76,   94,   91,
       98,   96,   98,   22,  101,  105,  164,  105,   98,  101,

      106,  110,  106,  111,  101,  114,  115,  117,  116,  110,
      114,  111,  117,  125,  168,  129,   22,   22,   31,  168,
       31,   31,   31,  116,  125,   31,  129,   31,   31,  116,
       31,   31,  363,  138,  131,  284,  284,   31,   51,   51,
       51,   51,  131,   51,  138,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   84,  113,   84,   84,
       84,  140,  124,   84,  153,   84,   84,  302,  302,  140,
      113,  157,  170,  163,  153,   84,   88,  124,   88,   88,
       88,  157,  154,   88,  154,   88,   88,  163,  162,  167,

      154,  170,  163,  169,  113,   88,  171,  162,  173,  167,
      124,  146,  169,  146,  146,  146,  162,  172,  146,  173,
      146,  146,  171,  181,  172,  184,  185,  188,  191,  197,
      146,  200,  201,  202,  181,  204,  184,  188,  191,  197,
      206,  208,  361,  185,  209,  245,  360,  245,  200,  208,
      201,  206,  209,  202,  204,  207,  210,  181,  181,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  207,  203,  203,  203,  210,  211,  220,  203,
      203,  203,  216,  214,  240,  211,  214,  214,  215,  215,
      214,  218,  240,  216,  214,  214,  222,  215,  224,  246,

      230,  248,  218,  203,  203,  203,  359,  222,  246,  224,
      230,  243,  220,  239,  239,  239,  216,  216,  244,  243,
      247,  249,  248,  261,  262,  263,  244,  276,  296,  247,
      249,  261,  273,  273,  273,  276,  263,  275,  275,  275,
      277,  278,  280,  279,  281,  299,  297,  262,  283,  277,
      278,  279,  282,  280,  297,  281,  239,  282,  298,  283,
      300,  303,  303,  299,  301,  317,  296,  305,  305,  319,
      298,  300,  322,  301,  321,  321,  324,  319,  334,  337,
      337,  348,  365,  322,  347,  356,  324,  334,  357,  357,
      332,  364,  348,  366,  358,  362,  367,  317,  320,  320,

      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  365,  320,  320,  320,  332,  362,  347,  320,  320,
      320,  355,  356,  354,  353,  352,  351,  366,  364,  367,
      350,  349,  346,  345,  344,  343,  342,  341,  340,  331,
      330,  329,  320,  320,  320,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  328,  323,
      323,  323,  327,  326,  325,  323,  323,  323,  314,  313,
      312,  311,  310,  309,  308,  307,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  271,  269,  267,  323,
      323,  323,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  380,  380,  265,  264,
      260,  259,  380,  380,  258,  257,  380,  380,  380,  256,
      380,  380,  380,  380,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      383,  383,  255,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  384,  384,
      254,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  385,  385,  253,  252,
      251,  385,  385,  250,  385,  385,  385,  237,  385,  235,
      385,  233,  385,  385,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  387,  387,  231,  387,  228,  387,  387,  387,
      387,  387,  387,  227,  387,  226,  387,  225,  387,  387,
      388,  388,  223,  388,  388,  388,  388,  388,  388,  221,
      388,  219,  388,  213,  388,  212,  199,  388,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  198,
      389,  195,  389,  389,  389,  389,  390,  194,  390,  193,
      192,  390,  190,  390,  189,  390,  187,  390,  186,  390,
      391,  391,  183,  391,  391,  391,  391,  179,  391,  391,
      391,  391,  391,  176,  391,  175,  174,  391,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  160,
      397,  159,  156,  397,  398,  155,  398,  151,  398,  398,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  403,  149,  144,  143,  141,  139,  134,  132,
      130,  403,  128,  403,  127,  403,  405,  405,  126,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      408,  408,  123,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  414,  414,

      122,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  120,  419,  419,

      419,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  109,  420,  420,  420,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  104,   97,   95,   89,   87,   86,   82,   81,
       79,   77,   72,   68,   64,   63,   59,   58,   52,   49,
       45,   32,   29,   28,   23,    9,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371
    } ;

extern int commentcnvYY_flex_debug;
int commentcnvYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentcnvYYtext;
#line 1 "commentcnv.l"
/*****************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "commentcnv.l"

#define YY_NEVER_INTERACTIVE 1

  
#include <stdio.h>
#include <stdlib.h>

#include <qstack.h>
#include <qregexp.h>
#include <qtextstream.h>
#include <qglobal.h>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "condparser.h"

#include <assert.h>

#define YY_NO_INPUT 1

#define ADDCHAR(c)    g_outBuf->addChar(c)
#define ADDARRAY(a,s) g_outBuf->addArray(a,s)
  
struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};
  
static BufStr * g_inBuf;
static BufStr * g_outBuf;
static int      g_inBufPos;
static int      g_col;
static int      g_blockHeadCol;
static bool     g_mlBrief;
static int      g_readLineCtx;
static bool     g_skip;
static QCString g_fileName;
static int      g_lineNr;
static int      g_condCtx;
static QStack<CondCtx> g_condStack;
static QCString g_blockName;
static int      g_lastCommentContext;
static bool     g_inSpecialComment;
static bool     g_inRoseComment;
static int      g_stringContext;
static int      g_charContext;
static int      g_javaBlock;
static bool     g_specialComment;

static QCString g_aliasString;
static int      g_blockCount;
static bool     g_lastEscaped;
static int      g_lastBlockContext;
static bool     g_pythonDocString;

static SrcLangExt g_lang;
static bool       isFixedForm; // For Fortran

static void replaceCommentMarker(const char *s,int len)
{
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n')) 
  {
    ADDCHAR(c);
    g_lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#')) 
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker 
    { 
      blanks++;
      p++; 
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(int)(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize); 
    else break;
  }
  return col;
}

static inline void copyToOutput(const char *s,int len)
{
  int i;
  if (g_skip) // only add newlines.
  {
    for (i=0;i<len;i++) 
    {
      if (s[i]=='\n') 
      {
	ADDCHAR('\n');
	//fprintf(stderr,"---> skip %d\n",g_lineNr);
	g_lineNr++;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    static int tabSize=Config_getInt("TAB_SIZE");
    for (i=0;i<len;i++) 
    {
      switch (s[i])
      {
	case '\n': g_col=0; 
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   g_lineNr++; break;
	case '\t': g_col+=tabSize-(g_col%tabSize); break;
	default:   g_col++; break;
      }
    }
  }
}

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_fileName,g_lineNr,sectId);
  g_condStack.push(new CondCtx(g_lineNr,sectId,g_skip));
  if (!expResult) // not enabled
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    warn(g_fileName,g_lineNr,"Found \\endcond command without matching \\cond");
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

/** copies string \a s with length \a len to the output, while 
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(const char *s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(result,result.length());
}


#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inBuf->curPos()-g_inBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inBuf->data()+g_inBufPos,bytesToCopy);
  g_inBufPos+=bytesToCopy;
  return bytesToCopy;
}

void replaceComment(int offset);











#line 1224 "<stdout>"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define Verbatim 6
#define VerbatimCode 7
#define ReadLine 8
#define CondLine 9
#define ReadAliasArgs 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy (void );

int commentcnvYYget_debug (void );

void commentcnvYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentcnvYYget_extra (void );

void commentcnvYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentcnvYYget_in (void );

void commentcnvYYset_in  (FILE * in_str  );

FILE *commentcnvYYget_out (void );

void commentcnvYYset_out  (FILE * out_str  );

yy_size_t commentcnvYYget_leng (void );

char *commentcnvYYget_text (void );

int commentcnvYYget_lineno (void );

void commentcnvYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap (void );
#else
extern int commentcnvYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentcnvYYtext, commentcnvYYleng, 1, commentcnvYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentcnvYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentcnvYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentcnvYYin))==0 && ferror(commentcnvYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentcnvYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (void);

#define YY_DECL int commentcnvYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentcnvYYtext and commentcnvYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentcnvYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentcnvYYtext[commentcnvYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 241 "commentcnv.l"


#line 1422 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentcnvYYin )
			commentcnvYYin = stdin;

		if ( ! commentcnvYYout )
			commentcnvYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
		}

		commentcnvYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentcnvYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 372 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1467 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 243 "commentcnv.l"
{ /* eat anything that is not " / or \n */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				   }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 246 "commentcnv.l"
{ /* start of python long comment */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = TRUE;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
                                   }
	YY_BREAK
case 3:
/* rule 3 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 258 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 269 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       /* check for fixed format; we might have some conditional as part of multilene if like C<5 .and. & */
                                       if (isFixedForm && (g_col == 0))
                                       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				         BEGIN(CComment);
				       }
				       else
				       {
				         REJECT;
				       }
				     }
  				   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 288 "commentcnv.l"
{
  			             if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     }
                                   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 298 "commentcnv.l"
{
  			             if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       if (g_col == 0)
                                       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       }
				       else
				       {
				         REJECT;
				       }
				     }
                                   }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 315 "commentcnv.l"
{ /* start of a string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_stringContext = YY_START;
				     BEGIN(SkipString); 
                                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 320 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_charContext = YY_START;
                                     if (g_lang!=SrcLangExt_VHDL)
                                     {
				       BEGIN(SkipChar);
                                     }
  				   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 328 "commentcnv.l"
{ /* new line */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
#line 332 "commentcnv.l"
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 332 "commentcnv.l"
{ /* start C++ style special comment block */
  				     if (g_mlBrief) 
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (commentcnvYYtext[2]=='/')
				       {
					 while (i<(int)commentcnvYYleng && commentcnvYYtext[i]=='/') i++;
				       }
				       g_blockHeadCol=g_col;
				       copyToOutput("/**",3); 
				       replaceAliases(commentcnvYYtext+i);
				       g_inSpecialComment=TRUE;
				       //BEGIN(SComment); 
				       g_readLineCtx=SComment;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 353 "commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (g_mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     g_blockHeadCol=g_col;
				     copyToOutput("/**",3);
				     replaceAliases(commentcnvYYtext+i);
				     g_inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 362 "commentcnv.l"
{ /* one line C++ comment */ 
				     g_inSpecialComment=commentcnvYYtext[2]=='/' || commentcnvYYtext[2]=='!';
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 368 "commentcnv.l"
{ /* start of a C comment */
  			             g_specialComment=(int)commentcnvYYleng==3;
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(CComment); 
                                   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 373 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 384 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 395 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       BEGIN(CComment);
				     }
  				   }
	YY_BREAK
case 18:
/* rule 18 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 406 "commentcnv.l"
{
                                     copyToOutput("@code",5); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=1;
				     g_blockName=&commentcnvYYtext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 413 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=0;
				     g_blockName=&commentcnvYYtext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 420 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     if (g_blockName.at(1)=='[')
				     {
				       g_blockName.at(1)=']';
				     }
				     else if (g_blockName.at(1)=='{')
				     {
				       g_blockName.at(1)='}';
				     }
				     g_lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 434 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     g_lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 440 "commentcnv.l"
{ /* any ather character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 443 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (commentcnvYYtext[1]=='f') // end of formula
				     {
				       BEGIN(g_lastCommentContext);
				     }
				     else if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 454 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock++;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     }
                                   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 465 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock--;
				       if (g_javaBlock==0)
				       {
                                         copyToOutput(" @endcode ",10);
				         BEGIN(g_lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       }
				     }
  				   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 484 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 491 "commentcnv.l"
{ /* skip leading comments */
  				     if (!g_inSpecialComment)
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     }
                                     else
                                     {
                                       int l=0;
                                       while (commentcnvYYtext[l]==' ' || commentcnvYYtext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(commentcnvYYtext,l);
                                       if (commentcnvYYleng-l==3) // ends with //! or ///
                                       {
                                         copyToOutput(" * ",3);
                                       }
                                       else // ends with //
                                       {
                                         copyToOutput("//",2);
                                       }
                                     }
  				   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 514 "commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 517 "commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 520 "commentcnv.l"
{
  				     if (g_blockName=="dot" || g_blockName=="msc" || g_blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
                                       int l=0;
                                       while (commentcnvYYtext[l]==' ' || commentcnvYYtext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(commentcnvYYtext,l);
				       copyToOutput("   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 537 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 540 "commentcnv.l"
{ /* escaped character in string */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 543 "commentcnv.l"
{ /* end of string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(g_stringContext); 
                                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 547 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 550 "commentcnv.l"
{ /* new line inside string (illegal for some compilers) */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 553 "commentcnv.l"
{ /* escaped character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 556 "commentcnv.l"
{ /* end of character literal */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                     BEGIN(g_charContext);
                                   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 560 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 563 "commentcnv.l"
{ /* new line character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 567 "commentcnv.l"
{ /* anything that is not a '*' or command */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 570 "commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 573 "commentcnv.l"
{ /* end of Python docstring */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = FALSE;
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 585 "commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                     /* in case of Fortran always end of comment */
  				     if (g_lang==SrcLangExt_Fortran)
				     {
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 593 "commentcnv.l"
{ /* end of C comment */
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 604 "commentcnv.l"
{ /* end of Python comment */
                                     if (g_lang!=SrcLangExt_Python || g_pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 615 "commentcnv.l"
{ /* end of VHDL comment */
                                     if (g_lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment>"'"			   {
  			             g_charContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipChar);
  				   }
<CComment>"\""			   {
  			             g_stringContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipString);
  				   }
   */
case 47:
YY_RULE_SETUP
#line 638 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
  				   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 641 "commentcnv.l"
{
  				     replaceComment(0);
  				   }
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 644 "commentcnv.l"
{
                                     replaceComment(1); 
                                   }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 647 "commentcnv.l"
{ 
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 652 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 52:
#line 658 "commentcnv.l"
case 53:
/* rule 53 can match eol */
#line 659 "commentcnv.l"
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 659 "commentcnv.l"
{    // or   //!something
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
#line 665 "commentcnv.l"
case 56:
/* rule 56 can match eol */
#line 666 "commentcnv.l"
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 666 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 671 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(0);
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 683 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(1); 
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 695 "commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(" */",3); 
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_inSpecialComment=FALSE;
				     g_inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 702 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                     BEGIN(g_readLineCtx);
  				   }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 706 "commentcnv.l"
{ // escaped command
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 709 "commentcnv.l"
{ // conditional section
  				     g_condCtx = YY_START; 
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 713 "commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=g_skip;
  				     endCondSection();
				     if (YY_START==CComment && oldSkip && !g_skip) 
    			             {
				       //printf("** Adding start of comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (g_specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 732 "commentcnv.l"
{
  				     bool oldSkip=g_skip;
                                     startCondSection(commentcnvYYtext);
				     if ((g_condCtx==CComment || g_readLineCtx==SComment) && 
                                         !oldSkip && g_skip) 
    			             {
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
                                     if (g_readLineCtx==SComment)
                                     {
                                       BEGIN(SComment);
                                     }
                                     else
                                     {
  				       BEGIN(g_condCtx);
                                     }
  				   }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 755 "commentcnv.l"

	YY_BREAK
case 67:
/* rule 67 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
#line 757 "commentcnv.l"
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 757 "commentcnv.l"
{ // forgot section id?
  				     if (YY_START!=CondLine) g_condCtx=YY_START;
  				     bool oldSkip=g_skip;
  				     startCondSection(" "); // fake section id causing the section to be hidden unconditionally
				     if ((g_condCtx==CComment || g_readLineCtx==SComment) && 
                                         !oldSkip && g_skip) 
    			             {
				       //printf("** Adding terminator for comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
				     if (*commentcnvYYtext=='\n') g_lineNr++;
                                     if (g_readLineCtx==SComment)
                                     {
                                       BEGIN(SComment);
                                     }
                                     else
                                     {
  				       BEGIN(g_condCtx);
                                     }
  				   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 782 "commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(commentcnvYYtext);
  				   }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 785 "commentcnv.l"
{ // expand alias with arguments
                                     g_lastBlockContext=YY_START;
				     g_blockCount=1;
				     g_aliasString=commentcnvYYtext;
				     g_lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 792 "commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 794 "commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(g_aliasString,g_aliasString.length());
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 806 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 810 "commentcnv.l"
{
                                     if (g_lastEscaped)  g_lastEscaped=FALSE;
                                     else                g_lastEscaped=TRUE;
                                     g_aliasString+=commentcnvYYtext;
                                   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 815 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     g_lineNr++;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 820 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     if (!g_lastEscaped) g_blockCount++;
				     g_lastEscaped=FALSE;
                                   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 825 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     if (!g_lastEscaped) g_blockCount--;
				     if (g_blockCount==0)
				     {
				       replaceAliases(g_aliasString);
				       BEGIN( g_lastBlockContext );
				     }
				     g_lastEscaped=FALSE;
  			           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 835 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 839 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 843 "commentcnv.l"
ECHO;
	YY_BREAK
#line 2520 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentcnvYYin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentcnvYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentcnvYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentcnvYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(commentcnvYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 372 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 372 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 371);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentcnvYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(commentcnvYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentcnvYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentcnvYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentcnvYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentcnvYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * 
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf  );

	commentcnvYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentcnvYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack();

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentcnvYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char * yystr )
{
    
	return commentcnvYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentcnvYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentcnvYYtext[commentcnvYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentcnvYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentcnvYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentcnvYYget_lineno  (void)
{
        
    return commentcnvYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentcnvYYget_in  (void)
{
        return commentcnvYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentcnvYYget_out  (void)
{
        return commentcnvYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentcnvYYget_leng  (void)
{
        return commentcnvYYleng;
}

/** Get the current token.
 * 
 */

char *commentcnvYYget_text  (void)
{
        return commentcnvYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentcnvYYset_lineno (int  line_number )
{
    
    commentcnvYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  in_str )
{
        commentcnvYYin = in_str ;
}

void commentcnvYYset_out (FILE *  out_str )
{
        commentcnvYYout = out_str ;
}

int commentcnvYYget_debug  (void)
{
        return commentcnvYY_flex_debug;
}

void commentcnvYYset_debug (int  bdebug )
{
        commentcnvYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentcnvYYin = stdin;
    commentcnvYYout = stdout;
#else
    commentcnvYYin = (FILE *) 0;
    commentcnvYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentcnvYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentcnvYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentcnvYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 843 "commentcnv.l"



void replaceComment(int offset)
{
  if (g_mlBrief || g_skip)
  {
    copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",commentcnvYYtext);
    int i=computeIndent(&commentcnvYYtext[offset]);
    if (i==g_blockHeadCol)
    {
      replaceCommentMarker(commentcnvYYtext,(int)commentcnvYYleng);
    }
    else
    {
      copyToOutput(" */",3);
      int i;for (i=(int)commentcnvYYleng-1;i>=0;i--) unput(commentcnvYYtext[i]);
      g_inSpecialComment=FALSE;
      BEGIN(Scan);                                            
    }                                                         
  }
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for(int i=0;;i++) {
    column++;

    switch(contents[i]) {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}


/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(BufStr *inBuf,BufStr *outBuf,const char *fileName)
{
  //printf("convertCppComments(%s)\n",fileName);
  g_inBuf    = inBuf;
  g_outBuf   = outBuf;
  g_inBufPos = 0;
  g_col      = 0;
  g_mlBrief = Config_getBool("MULTILINE_CPP_IS_BRIEF");
  g_skip     = FALSE;
  g_fileName = fileName;
  g_lang = getLanguageFromFileName(fileName);
  g_pythonDocString = FALSE;
  g_lineNr   = 1;
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);

  isFixedForm = FALSE;
  if (g_lang==SrcLangExt_Fortran)
  {
    isFixedForm = recognizeFixedForm(inBuf->data());
  }

  if (g_lang==SrcLangExt_Markdown)
  {
    BEGIN(CComment);
  }
  else
  {
    BEGIN(Scan);
  }
  commentcnvYYlex();
  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(g_fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
  }
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    g_outBuf->at(g_outBuf->curPos())='\0';
    msg("-------------\n%s\n-------------\n",g_outBuf->data());
  }
}


//----------------------------------------------------------------------------
#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
    void commentcnvYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


